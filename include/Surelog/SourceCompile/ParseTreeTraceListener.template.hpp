// This file is auto-generated by generate_parse_tree_listener.py
// DO NOT EDIT

/*
 Copyright 2019 Alain Dargelas
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 *
 * File:   ParseTreeTraceListener.h
 * Author: hs
 *
 */

#ifndef SURELOG_PARSETREETRACELISTENER_H
#define SURELOG_PARSETREETRACELISTENER_H
#pragma once

#include <Surelog/SourceCompile/ParseTreeListener.h>

#include <filesystem>
#include <ostream>

// clang-format off
#define TRACE_INIT_CONTEXT                \
  int32_t sl = 0, sc = 0, el = 0, ec = 0; \
  std::string text;                       \
  getNodeLocation(node, sl, sc, el, ec);  \
  getNodeText(node, text)

#define TRACE_PRINT_CONTEXT \
  "[" << sl << "," << sc <<  ":" << el << "," << ec <<  "], (" << escaped(text) << ")"

#define TRACE_ENTER TRACE_INIT_CONTEXT;       \
  m_strm << std::string(m_indent++ * 2, ' ')  \
  << __func__ << ": " << TRACE_PRINT_CONTEXT  \
  << std::endl
#define TRACE_LEAVE TRACE_INIT_CONTEXT;       \
  m_strm << std::string(2 * --m_indent, ' ')  \
  << __func__ << ": " << TRACE_PRINT_CONTEXT  \
  << std::endl
#define TRACE_VISIT TRACE_INIT_CONTEXT;       \
  m_strm << std::string(2 * m_indent, ' ')    \
  << __func__ << ": " << TRACE_PRINT_CONTEXT  \
  << std::endl
// clang-format on

namespace SURELOG {
class ParseTreeTraceListener final : public ParseTreeListener {
 public:
  ParseTreeTraceListener(std::ostream& strm) : m_strm(strm), m_indent(0) {}
  ~ParseTreeTraceListener() final = default;

  void enterSourceFile(SURELOG::PathId fileId) final {
    m_strm << std::string(m_indent++ * 2, ' ') << __func__ << ": "
           << SURELOG::PathIdPP(fileId) << std::endl;

    FileSystem* const fileSystem = FileSystem::getInstance();

    const std::string srcFilepath =
        fileSystem->toPlatformAbsPath(fileId).string();
    if ((srcFilepath.find("/third_party/UVM/") != std::string::npos) ||
        (srcFilepath.find("\\third_party\\UVM\\") != std::string::npos)) {
      m_visited.insert(getRootNode());
    }
  }
  void leaveSourceFile(SURELOG::PathId fileId) final {
    m_strm << std::string(2 * --m_indent, ' ') << __func__ << ": "
           << SURELOG::PathIdPP(fileId) << std::endl;
  }

  std::string escaped(std::string_view str) const {
    std::string result;
    for (char ch : str) {
      if (ch == '\'')
        result.append("\\'");
      else if (ch == '\"')
        result.append("\\\"");
      else if (ch == '\\')
        result.append("\\");
      else if (ch == '\n')
        result.append("\\n");
      else if (ch == '\r')
        result.append("\\r");
      else if (ch == '\t')
        result.append("\\t");
      else
        result.append(1, ch);
    }
    return result;
  }

  // clang-format off
<PUBLIC_ENTER_LEAVE_DECLARATIONS>
  // clang-format on

  // clang-format off
<PUBLIC_VISIT_DECLARATIONS>
  // clang-format on

 private:
   std::ostream& m_strm;
   size_t m_indent = 0;
};
}  // namespace SURELOG

#undef TRACE_INIT_CONTEXT
#undef TRACE_PRINT_CONTEXT
#undef TRACE_ENTER
#undef TRACE_LEAVE
#undef TRACE_VISIT

#endif  // SURELOG_ASTTRACELISTENER_H

name: 'main'

on:
  push:
  pull_request:

jobs:
  linux-gcc:
    name: ${{ matrix.mode }}

    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        mode:
        - test
        - regression
        - coverage
        - valgrind
        - install
        - pythonapi
    env:
      MODE: ${{ matrix.mode }}

    steps:

    - name: Cancel previous
      uses: styfle/cancel-workflow-action@0.9.1
      with:
        access_token: ${{ github.token }}

    - name: Install dependencies
      run: |
        sudo apt-get update -qq
        sudo apt install -y \
          g++-9 \
          default-jre \
          cmake \
          build-essential \
          google-perftools \
          libgoogle-perftools-dev \
          uuid-dev \
          lcov \
          valgrind
        sudo ln -sf /usr/bin/g++-9 /usr/bin/g++
        sudo ln -sf /usr/bin/gcc-9 /usr/bin/gcc
        sudo ln -sf /usr/bin/gcov-9 /usr/bin/gcov

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
        architecture: x64

    - name: Setup Python Packages
      run: |
        pip3 install orderedmultidict
        pip3 install psutil

    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Use ccache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: linux-${{ matrix.mode }}

    - name: Configure shell
      run: |
        echo 'CC=gcc-9' >> $GITHUB_ENV
        echo 'CXX=g++-9' >> $GITHUB_ENV
        echo 'PATH=/usr/lib/ccache:'"$PATH" >> $GITHUB_ENV
        echo 'PREFIX=${GITHUB_WORKSPACE}/install' >> $GITHUB_ENV
        echo "ADDITIONAL_CMAKE_OPTIONS='-DPython3_ROOT_DIR=${pythonLocation} -DMY_CXX_WARNING_FLAGS="-W -Wall -Wextra -Wno-unused-parameter -Wno-unused-variable -Werror -UNDEBUG"'" >> $GITHUB_ENV
        echo 'RULE_MESSAGES=off' >> $GITHUB_ENV

    - name: Show shell configuration
      run: |
        env
        which cmake && cmake --version
        which make && make --version
        which java && java -version
        which python && python --version
        which ninja && ninja --version
        which $CC && $CC --version
        which $CXX && $CXX --version
    - name: PythonAPI
      if: matrix.mode == 'pythonapi'
      run: |
        make ADDITIONAL_CMAKE_OPTIONS="-DSURELOG_WITH_PYTHON=1 -DCMAKE_CXX_FLAGS=-fpermissive"

    - name: Test
      if: matrix.mode == 'test'
      run: |
        make test/unittest-d

    - name: Regression
      if: matrix.mode == 'regression'
      run: |
        make test/regression

    - name: Coverage
      if: matrix.mode == 'coverage'
      run: |
        make coverage-build/surelog.coverage

    - name: Valgrind
      if: matrix.mode == 'valgrind'
      run: |
        make test/valgrind

    - name: Upload coverage
      # will show up under https://app.codecov.io/gh/chipsalliance/Surelog
      if: matrix.mode == 'coverage'
      uses: codecov/codecov-action@v2
      with:
        files: coverage-build/surelog.coverage
        fail_ci_if_error: false

    - name: Install Test
      if: matrix.mode == 'install'
      run: |
        make release
        make install
        make clean   # make sure we only see installation artifacts
        make test_install

    - name: Prepare build artifacts
      if: matrix.mode == 'install'
      run: |
        mv install surelog-linux-gcc
        mkdir build
        tar czvfp build/surelog-linux-gcc.tgz surelog-linux-gcc

    - name: Prepare regression artifacts
      if: matrix.mode == 'regression' && always()
      run: |
        cd build
        mv regression surelog-linux-gcc-regression
        find surelog-linux-gcc-regression -name "*.log" | tar czvfp surelog-linux-gcc-regression.tgz -T -

    - name: Archive build artifacts
      if: matrix.mode == 'install'
      uses: actions/upload-artifact@v2
      with:
        name: surelog-linux-gcc
        path: ${{ github.workspace }}/build/surelog-linux-gcc.tgz

    - name: Archive regression artifacts
      if: matrix.mode == 'regression' && always()
      uses: actions/upload-artifact@v2
      with:
        name: surelog-linux-gcc-regression
        path: ${{ github.workspace }}/build/surelog-linux-gcc-regression.tgz

  msys2-gcc:
    runs-on: windows-2022
    defaults:
      run:
        shell: msys2 {0}

    steps:

    - name: Cancel previous
      uses: styfle/cancel-workflow-action@0.9.1
      with:
        access_token: ${{ github.token }}

    - name: Setup Java
      uses: actions/setup-java@v1
      with:
        java-version: 1.8.0.275
        java-package: jre
        architecture: x64

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
        architecture: x64

    - name: Setup Python Packages
      shell: cmd
      run: |
        pip3 install orderedmultidict
        pip3 install psutil

    - name: Setup Msys2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MSYS
        update: true
        install: make cmake ninja gcc git diffutils
      env:
        MSYS2_PATH_TYPE: inherit

    - name: Configure Git
      run: git config --global core.autocrlf input
      shell: bash

    - name: Move builds to C:\ drive
      shell: cmd
      run: |
        mkdir C:\Surelog
        cd /D C:\Surelog
        rd /S /Q %GITHUB_WORKSPACE%
        mklink /D %GITHUB_WORKSPACE% C:\Surelog

    - name: Git pull
      uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Configure shell environment variables
      run: |
        export JAVA_HOME=`cygpath -u $JAVA_HOME_8_0_275_X64`
        export CWD=`pwd`
        export Py3_ROOT_DIR=`cygpath -u $pythonLocation`

        echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
        echo 'CMAKE_GENERATOR=Ninja' >> $GITHUB_ENV
        echo 'CC=gcc' >> $GITHUB_ENV
        echo 'CXX=g++' >> $GITHUB_ENV
        echo 'NO_TCMALLOC=On' >> $GITHUB_ENV
        echo "PREFIX=${CWD}/install" >> $GITHUB_ENV
        echo "Py3_ROOT_DIR=$Py3_ROOT_DIR" >> $GITHUB_ENV
        echo "ADDITIONAL_CMAKE_OPTIONS=-DPython3_ROOT_DIR=$Py3_ROOT_DIR" >> $GITHUB_ENV

        echo "$JAVA_HOME/bin" >> $GITHUB_PATH
        echo "$Py3_ROOT_DIR" >> $GITHUB_PATH

    - name: Show shell configuration
      run: |
        export PATH=$JAVA_HOME/bin:$Py3_ROOT_DIR:$PATH
        env
        where git && git --version
        where cmake && cmake --version
        where make && make --version
        where java && java -version
        where python && python --version
        where ninja && ninja --version
        where $CC && $CC --version
        where $CXX && $CXX --version

    - name: Build
      run: |
        export PATH=$JAVA_HOME/bin:$Py3_ROOT_DIR:$PATH
        make release
        make install

    - name: Test
      run: |
        export PATH=$JAVA_HOME/bin:$Py3_ROOT_DIR:$PATH
        make test_install
        make test/unittest
        make test/regression

    - name: Prepare build artifacts
      run: |
        mv install surelog-msys2-gcc
        tar czvfp build/surelog-msys2-gcc.tgz surelog-msys2-gcc

    - name: Prepare regression artifacts
      if: always()
      run: |
        cd build
        mv regression surelog-msys2-gcc-regression
        find surelog-msys2-gcc-regression -name "*.log" | tar czvfp surelog-msys2-gcc-regression.tgz -T -

    - name: Archive build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: surelog-msys2-gcc
        path: ${{ github.workspace }}/build/surelog-msys2-gcc.tgz

    - name: Archive regression artifacts
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: surelog-msys2-gcc-regression
        path: ${{ github.workspace }}/build/surelog-msys2-gcc-regression.tgz

  windows-cl:
    runs-on: windows-2022

    defaults:
      run:
        shell: cmd

    steps:

    - name: Cancel previous
      uses: styfle/cancel-workflow-action@0.9.1
      with:
        access_token: ${{ github.token }}

    - name: Install Core Dependencies
      run: |
        choco install -y make

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
        architecture: x64

    - name: Setup Python Packages
      run: |
        pip3 install orderedmultidict
        pip3 install psutil

    - name: Setup Java
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
        java-package: jre
        architecture: x64

    - run: git config --global core.autocrlf input
      shell: bash

    - name: Move builds to C:\ drive
      shell: cmd
      run: |
        mkdir C:\Surelog
        cd /D C:\Surelog
        rd /S /Q %GITHUB_WORKSPACE%
        mklink /D %GITHUB_WORKSPACE% C:\Surelog

    - uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Build & Test
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"

        set CMAKE_GENERATOR=Ninja
        set CC=cl
        set CXX=cl
        set NO_TCMALLOC=On
        set PREFIX=%GITHUB_WORKSPACE%\install
        set CPU_CORES=%NUMBER_OF_PROCESSORS%

        set MAKE_DIR=C:\make\bin
        set PATH=%pythonLocation%;%JAVA_HOME%\bin;%MAKE_DIR%;%PATH%
        set ADDITIONAL_CMAKE_OPTIONS=-DPython3_ROOT_DIR=%pythonLocation%

        set
        where cmake && cmake --version
        where make && make --version
        where java && java -version
        where python && python --version
        where ninja && ninja --version

        make release
        if %errorlevel% neq 0 exit /b %errorlevel%
        make install
        if %errorlevel% neq 0 exit /b %errorlevel%
        make test_install
        if %errorlevel% neq 0 exit /b %errorlevel%
        make test/unittest
        if %errorlevel% neq 0 exit /b %errorlevel%
        make test/regression

    - name: Prepare build artifacts
      shell: bash
      run: |
        mv install surelog-windows-cl
        tar czvfp build/surelog-windows-cl.tgz surelog-windows-cl

    - name: Prepare regression artifacts
      shell: bash
      if: always()
      run: |
        cd build
        mv regression surelog-windows-cl-regression
        find surelog-windows-cl-regression -name "*.log" | tar czvfp surelog-windows-cl-regression.tgz -T -

    - name: Archive build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: surelog-windows-cl
        path: ${{ github.workspace }}/build/surelog-windows-cl.tgz

    - name: Archive regression artifacts
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: surelog-windows-cl-regression
        path: ${{ github.workspace }}/build/surelog-windows-cl-regression.tgz

  macos-gcc:
    runs-on: macos-latest

    steps:

    - name: Cancel previous
      uses: styfle/cancel-workflow-action@0.9.1
      with:
        access_token: ${{ github.token }}

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
        architecture: x64

    - name: Setup Python Packages
      run: |
        pip3 install orderedmultidict
        pip3 install psutil

    - uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Use ccache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: macos-gcc

    - name: Configure shell
      run: |
        echo 'CC=gcc-9' >> $GITHUB_ENV
        echo 'CXX=g++-9' >> $GITHUB_ENV
        echo "PATH=$(brew --prefix)/opt/ccache/libexec:$PATH" >> $GITHUB_ENV
        echo 'PREFIX=${GITHUB_WORKSPACE}/install' >> $GITHUB_ENV
        echo 'ADDITIONAL_CMAKE_OPTIONS=-DPython3_ROOT_DIR=${pythonLocation}' >> $GITHUB_ENV

    - name: Show shell configuration
      run: |
        env
        which cmake && cmake --version
        which make && make --version
        which java && java -version
        which python && python --version
        which $CC && $CC --version
        which $CXX && $CXX --version

    - name: Build
      run: |
        make release
        make install

    - name: Unit tests
      run: |
        make test_install
        make test/unittest

    - name: Regression tests
      run: |
        make test/regression

    - name: Prepare build artifacts
      run: |
        mv install surelog-macos-gcc
        tar czvfp build/surelog-macos-gcc.tgz surelog-macos-gcc

    - name: Prepare regression artifacts
      if: always()
      run: |
        cd build
        mv regression surelog-macos-gcc-regression
        find surelog-macos-gcc-regression -name "*.log" | tar czvfp surelog-macos-gcc-regression.tgz -T -

    - name: Archive build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: surelog-macos-gcc
        path: ${{ github.workspace }}/build/surelog-macos-gcc.tgz

    - name: Archive regression artifacts
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: surelog-macos-gcc-regression
        path: ${{ github.workspace }}/build/surelog-macos-gcc-regression.tgz

  macos-clang:
    runs-on: macos-latest

    steps:

    - name: Cancel previous
      uses: styfle/cancel-workflow-action@0.9.1
      with:
        access_token: ${{ github.token }}

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
        architecture: x64

    - name: Setup Python Packages
      run: |
        pip3 install orderedmultidict
        pip3 install psutil

    - uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Use ccache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: macos-clang

    - name: Configure shell
      run: |
        echo 'PREFIX=${GITHUB_WORKSPACE}/install' >> $GITHUB_ENV
        echo "PATH=$(brew --prefix)/opt/ccache/libexec:$PATH" >> $GITHUB_ENV
        echo 'ADDITIONAL_CMAKE_OPTIONS=-DPython3_ROOT_DIR=${pythonLocation}' >> $GITHUB_ENV

    - name: Show shell configuration
      run: |
        env
        which cmake && cmake --version
        which make && make --version
        which java && java -version
        which python && python --version

    - name: Build
      run: |
        make release
        make install

    - name: Unit tests
      run: |
        make test_install
        make test/unittest

    - name: Regression tests
      run: |
        make test/regression

    - name: Prepare build artifacts
      run: |
        mv install surelog-macos-clang
        tar czvfp build/surelog-macos-clang.tgz surelog-macos-clang

    - name: Prepare regression artifacts
      if: always()
      run: |
        cd build
        mv regression surelog-macos-clang-regression
        find surelog-macos-clang-regression -name "*.log" | tar czvfp surelog-macos-clang-regression.tgz -T -

    - name: Archive build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: surelog-macos-clang
        path: ${{ github.workspace }}/build/surelog-macos-clang.tgz

    - name: Archive regression artifacts
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: surelog-macos-clang-regression
        path: ${{ github.workspace }}/build/surelog-macos-clang-regression.tgz

  CodeFormatting:
    runs-on: ubuntu-20.04

    steps:

    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Install Dependencies
      run: |
        sudo apt-get install clang-format
        clang-format --version

    - name: Run formatting style check
      run: ./.github/bin/run-clang-format.sh

  ClangTidy:
    runs-on: ubuntu-20.04
    steps:

    - name: Cancel previous
      uses: styfle/cancel-workflow-action@0.8.0
      with:
        access_token: ${{ github.token }}

    - name: Install Dependencies
      run: |
        sudo apt-get update -qq
        sudo apt -qq -y install clang-tidy-12 \
                                g++-9 default-jre cmake \
                                uuid-dev build-essential

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
        architecture: x64

    - name: Setup Python Packages
      run: |
        pip3 install orderedmultidict
        pip3 install psutil

    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Use ccache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: clang-tidy-codegen

    - name: Configure shell
      run: |
        echo 'PATH=/usr/lib/ccache:'"$PATH" >> $GITHUB_ENV
        echo 'RULE_MESSAGES=off' >> $GITHUB_ENV

    - name: Prepare source
      run: |
        make run-cmake-release
        make -j2 -C build GenerateParser
        make -j2 -C build GenerateSerializer
        ln -sf build/compile_commands.json .

    - name: Run clang tidy
      run: |
        ./.github/bin/run-clang-tidy.sh limited

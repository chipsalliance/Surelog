[INFO :CM0023] Creating log file ../../build/tests/ModPortTest/slpp_unit/surelog.log.

[INFO :CM0020] Separate compilation-unit mode is on.

PP PREPROCESS FILE: top.v
PP TOKENS: 
[@0,0:5='module',<53>,1:0]
[@1,6:6=' ',<71>,1:6]
[@2,7:15='dff0_test',<70>,1:7]
[@3,16:16='(',<82>,1:16]
[@4,17:18='n1',<70>,1:17]
[@5,19:19=')',<83>,1:19]
[@6,20:20=';',<92>,1:20]
[@7,21:21='\n',<78>,1:21]
[@8,22:23='  ',<71>,2:0]
[@9,24:24='(',<82>,2:2]
[@10,25:25='*',<92>,2:3]
[@11,26:26=' ',<71>,2:4]
[@12,27:30='init',<70>,2:5]
[@13,31:31=' ',<71>,2:9]
[@14,32:32='=',<85>,2:10]
[@15,33:33=' ',<71>,2:11]
[@16,34:39='32'd1 ',<74>,2:12]
[@17,40:40='*',<92>,2:18]
[@18,41:41=')',<83>,2:19]
[@19,42:42='\n',<78>,2:20]
[@20,43:44='  ',<71>,3:0]
[@21,45:50='output',<70>,3:2]
[@22,51:51=' ',<71>,3:8]
[@23,52:53='n1',<70>,3:9]
[@24,54:54=';',<92>,3:11]
[@25,55:55='\n',<78>,3:12]
[@26,56:57='  ',<71>,4:0]
[@27,58:60='reg',<70>,4:2]
[@28,61:61=' ',<71>,4:5]
[@29,62:63='n1',<70>,4:6]
[@30,64:64=' ',<71>,4:8]
[@31,65:65='=',<85>,4:9]
[@32,66:66=' ',<71>,4:10]
[@33,67:71='32'd0',<74>,4:11]
[@34,72:72=';',<92>,4:16]
[@35,73:73='\n',<78>,4:17]
[@36,74:82='endmodule',<54>,5:0]
[@37,83:83='\n',<78>,5:9]
[@38,84:84='\n',<78>,6:0]
[@39,85:85='\n',<78>,7:0]
[@40,86:94='interface',<55>,8:0]
[@41,95:95=' ',<71>,8:9]
[@42,96:102='AXI_BUS',<70>,8:10]
[@43,103:103=' ',<71>,8:17]
[@44,104:104='#',<92>,8:18]
[@45,105:105='(',<82>,8:19]
[@46,106:106='\n',<78>,8:20]
[@47,107:107=' ',<71>,9:0]
[@48,108:116='parameter',<70>,9:1]
[@49,117:117=' ',<71>,9:10]
[@50,118:129='AXI_ID_WIDTH',<70>,9:11]
[@51,130:132='   ',<71>,9:23]
[@52,133:133='=',<85>,9:26]
[@53,134:134=' ',<71>,9:27]
[@54,135:135='-',<92>,9:28]
[@55,136:136='1',<74>,9:29]
[@56,137:137='\n',<78>,9:30]
[@57,138:138=')',<83>,10:0]
[@58,139:139=';',<92>,10:1]
[@59,140:140='\n',<78>,10:2]
[@60,141:141='\n',<78>,11:0]
[@61,142:143='  ',<71>,12:0]
[@62,144:150='typedef',<70>,12:2]
[@63,151:151=' ',<71>,12:9]
[@64,152:156='logic',<70>,12:10]
[@65,157:157=' ',<71>,12:15]
[@66,158:158='[',<90>,12:16]
[@67,159:170='AXI_ID_WIDTH',<70>,12:17]
[@68,171:171='-',<92>,12:29]
[@69,172:172='1',<74>,12:30]
[@70,173:173=':',<92>,12:31]
[@71,174:174='0',<74>,12:32]
[@72,175:175=']',<91>,12:33]
[@73,176:178='   ',<71>,12:34]
[@74,179:182='id_t',<70>,12:37]
[@75,183:183=';',<92>,12:41]
[@76,184:184='\n',<78>,12:42]
[@77,185:186='  ',<71>,13:0]
[@78,187:187='\n',<78>,13:2]
[@79,188:189='  ',<71>,14:0]
[@80,190:194='id_t1',<70>,14:2]
[@81,195:201='       ',<71>,14:7]
[@82,202:206='aw_id',<70>,14:14]
[@83,207:207=';',<92>,14:19]
[@84,208:208='\n',<78>,14:20]
[@85,209:211='   ',<71>,15:0]
[@86,212:212='\n',<78>,15:3]
[@87,213:214='  ',<71>,16:0]
[@88,215:221='modport',<70>,16:2]
[@89,222:222=' ',<71>,16:9]
[@90,223:228='Master',<70>,16:10]
[@91,229:229=' ',<71>,16:16]
[@92,230:230='(',<82>,16:17]
[@93,231:231='\n',<78>,16:18]
[@94,232:235='    ',<71>,17:0]
[@95,236:241='output',<70>,17:4]
[@96,242:242=' ',<71>,17:10]
[@97,243:247='aw_id',<70>,17:11]
[@98,248:248='\n',<78>,17:16]
[@99,249:250='  ',<71>,18:0]
[@100,251:251=')',<83>,18:2]
[@101,252:252=';',<92>,18:3]
[@102,253:253='\n',<78>,18:4]
[@103,254:254='\n',<78>,19:0]
[@104,255:256='  ',<71>,20:0]
[@105,257:260='id_t',<70>,20:2]
[@106,261:267='       ',<71>,20:6]
[@107,268:272='rw_id',<70>,20:13]
[@108,273:273=';',<92>,20:18]
[@109,274:274='\n',<78>,20:19]
[@110,275:277='   ',<71>,21:0]
[@111,278:278='\n',<78>,21:3]
[@112,279:280='  ',<71>,22:0]
[@113,281:287='modport',<70>,22:2]
[@114,288:288=' ',<71>,22:9]
[@115,289:293='Slave',<70>,22:10]
[@116,294:294=' ',<71>,22:15]
[@117,295:295='(',<82>,22:16]
[@118,296:296='\n',<78>,22:17]
[@119,297:300='    ',<71>,23:0]
[@120,301:306='output',<70>,23:4]
[@121,307:307=' ',<71>,23:10]
[@122,308:312='ww_id',<70>,23:11]
[@123,313:313='\n',<78>,23:16]
[@124,314:315='  ',<71>,24:0]
[@125,316:316=')',<83>,24:2]
[@126,317:317=';',<92>,24:3]
[@127,318:318='\n',<78>,24:4]
[@128,319:319='\n',<78>,25:0]
[@129,320:331='endinterface',<56>,26:0]
[@130,332:332='\n',<78>,26:12]
[@131,333:333='\n',<78>,27:0]
[@132,334:334='\n',<78>,28:0]
[@133,335:343='interface',<55>,29:0]
[@134,344:344=' ',<71>,29:9]
[@135,345:350='mem_if',<70>,29:10]
[@136,351:351=' ',<71>,29:16]
[@137,352:352='(',<82>,29:17]
[@138,353:357='input',<70>,29:18]
[@139,358:358=' ',<71>,29:23]
[@140,359:362='wire',<70>,29:24]
[@141,363:363=' ',<71>,29:28]
[@142,364:366='clk',<70>,29:29]
[@143,367:367=')',<83>,29:32]
[@144,368:368=';',<92>,29:33]
[@145,369:369='\n',<78>,29:34]
[@146,370:370='\n',<78>,30:0]
[@147,371:372='  ',<71>,31:0]
[@148,373:379='modport',<70>,31:2]
[@149,380:381='  ',<71>,31:9]
[@150,382:387='system',<70>,31:11]
[@151,388:388=' ',<71>,31:17]
[@152,389:389='(',<82>,31:18]
[@153,390:394='input',<70>,31:19]
[@154,395:395=' ',<71>,31:24]
[@155,396:398='clk',<70>,31:25]
[@156,399:399=')',<83>,31:28]
[@157,400:400=';',<92>,31:29]
[@158,401:401='\n',<78>,31:30]
[@159,402:403='  ',<71>,32:0]
[@160,404:410='modport',<70>,32:2]
[@161,411:412='  ',<71>,32:9]
[@162,413:418='memory',<70>,32:11]
[@163,419:419=' ',<71>,32:17]
[@164,420:420='(',<82>,32:18]
[@165,421:426='output',<70>,32:19]
[@166,427:427=' ',<71>,32:25]
[@167,428:430='clk',<70>,32:26]
[@168,431:431=')',<83>,32:29]
[@169,432:432=';',<92>,32:30]
[@170,433:433='\n',<78>,32:31]
[@171,434:434=' ',<71>,33:0]
[@172,435:435='\n',<78>,33:1]
[@173,436:447='endinterface',<56>,34:0]
[@174,448:448='\n',<78>,34:12]
[@175,449:449='\n',<78>,35:0]
[@176,450:455='module',<53>,36:0]
[@177,456:456=' ',<71>,36:6]
[@178,457:468='memory_ctrl1',<70>,36:7]
[@179,469:469=' ',<71>,36:19]
[@180,470:470='(',<82>,36:20]
[@181,471:476='mem_if',<70>,36:21]
[@182,477:477='.',<92>,36:27]
[@183,478:484='system1',<70>,36:28]
[@184,485:485=' ',<71>,36:35]
[@185,486:488='sif',<70>,36:36]
[@186,489:489=')',<83>,36:39]
[@187,490:490=';',<92>,36:40]
[@188,491:491='\n',<78>,36:41]
[@189,492:492='\n',<78>,37:0]
[@190,493:499='typedef',<70>,38:0]
[@191,500:501='  ',<71>,38:7]
[@192,502:505='enum',<70>,38:9]
[@193,506:506=' ',<71>,38:13]
[@194,507:507='{',<88>,38:14]
[@195,508:511='IDLE',<70>,38:15]
[@196,512:512=',',<84>,38:19]
[@197,513:517='WRITE',<70>,38:20]
[@198,518:518=',',<84>,38:25]
[@199,519:522='READ',<70>,38:26]
[@200,523:523=',',<84>,38:30]
[@201,524:527='DONE',<70>,38:31]
[@202,528:528='}',<89>,38:35]
[@203,529:529=' ',<71>,38:36]
[@204,530:534='fsm_t',<70>,38:37]
[@205,535:535=';',<92>,38:42]
[@206,536:536='\n',<78>,38:43]
[@207,537:537='\n',<78>,39:0]
[@208,538:542='fsm_t',<70>,40:0]
[@209,543:543=' ',<71>,40:5]
[@210,544:548='state',<70>,40:6]
[@211,549:549=';',<92>,40:11]
[@212,550:550='\n',<78>,40:12]
[@213,551:551='\n',<78>,41:0]
[@214,552:552='\n',<78>,42:0]
[@215,553:561='endmodule',<54>,43:0]
[@216,562:562='\n',<78>,43:9]
[@217,563:563='\n',<78>,44:0]
[@218,564:569='module',<53>,45:0]
[@219,570:570=' ',<71>,45:6]
[@220,571:582='memory_ctrl2',<70>,45:7]
[@221,583:583=' ',<71>,45:19]
[@222,584:584='(',<82>,45:20]
[@223,585:590='mem_if',<70>,45:21]
[@224,591:591='.',<92>,45:27]
[@225,592:597='system',<70>,45:28]
[@226,598:598=' ',<71>,45:34]
[@227,599:601='sif',<70>,45:35]
[@228,602:602=')',<83>,45:38]
[@229,603:603=';',<92>,45:39]
[@230,604:604='\n',<78>,45:40]
[@231,605:605='\n',<78>,46:0]
[@232,606:612='typedef',<70>,47:0]
[@233,613:614='  ',<71>,47:7]
[@234,615:618='enum',<70>,47:9]
[@235,619:619=' ',<71>,47:13]
[@236,620:620='{',<88>,47:14]
[@237,621:624='IDLE',<70>,47:15]
[@238,625:625=',',<84>,47:19]
[@239,626:630='WRITE',<70>,47:20]
[@240,631:631=',',<84>,47:25]
[@241,632:635='READ',<70>,47:26]
[@242,636:636=',',<84>,47:30]
[@243,637:640='DONE',<70>,47:31]
[@244,641:641='}',<89>,47:35]
[@245,642:642=' ',<71>,47:36]
[@246,643:647='fsm_t',<70>,47:37]
[@247,648:648=';',<92>,47:42]
[@248,649:649='\n',<78>,47:43]
[@249,650:650='\n',<78>,48:0]
[@250,651:655='fsm_t',<70>,49:0]
[@251,656:656=' ',<71>,49:5]
[@252,657:661='state',<70>,49:6]
[@253,662:662=';',<92>,49:11]
[@254,663:663='\n',<78>,49:12]
[@255,664:664='\n',<78>,50:0]
[@256,665:666='DD',<70>,51:0]
[@257,667:667=' ',<71>,51:2]
[@258,668:668='t',<70>,51:3]
[@259,669:669=';',<92>,51:4]
[@260,670:670='\n',<78>,51:5]
[@261,671:671='\n',<78>,52:0]
[@262,672:680='endmodule',<54>,53:0]
[@263,681:681='\n',<78>,53:9]
[@264,682:682='\n',<78>,54:0]
[@265,683:683='\n',<78>,55:0]
[@266,684:683='<EOF>',<-1>,56:0]
PP TREE: (top_level_rule null_rule (source_text (description (module module)) (description (text_blob  )) (description (text_blob dff0_test)) (description (text_blob ()) (description (text_blob n1)) (description (text_blob ))) (description (text_blob ;)) (description (text_blob \n)) (description (text_blob   )) (description (text_blob ()) (description (text_blob *)) (description (text_blob  )) (description (text_blob init)) (description (text_blob  )) (description (text_blob =)) (description (text_blob  )) (description (number 32'd1 )) (description (text_blob *)) (description (text_blob ))) (description (text_blob \n)) (description (text_blob   )) (description (text_blob output)) (description (text_blob  )) (description (text_blob n1)) (description (text_blob ;)) (description (text_blob \n)) (description (text_blob   )) (description (text_blob reg)) (description (text_blob  )) (description (text_blob n1)) (description (text_blob  )) (description (text_blob =)) (description (text_blob  )) (description (number 32'd0)) (description (text_blob ;)) (description (text_blob \n)) (description (endmodule endmodule)) (description (text_blob \n)) (description (text_blob \n)) (description (text_blob \n)) (description (sv_interface interface)) (description (text_blob  )) (description (text_blob AXI_BUS)) (description (text_blob  )) (description (text_blob #)) (description (text_blob ()) (description (text_blob \n)) (description (text_blob  )) (description (text_blob parameter)) (description (text_blob  )) (description (text_blob AXI_ID_WIDTH)) (description (text_blob    )) (description (text_blob =)) (description (text_blob  )) (description (text_blob -)) (description (number 1)) (description (text_blob \n)) (description (text_blob ))) (description (text_blob ;)) (description (text_blob \n)) (description (text_blob \n)) (description (text_blob   )) (description (text_blob typedef)) (description (text_blob  )) (description (text_blob logic)) (description (text_blob  )) (description (text_blob [)) (description (text_blob AXI_ID_WIDTH)) (description (text_blob -)) (description (number 1)) (description (text_blob :)) (description (number 0)) (description (text_blob ])) (description (text_blob    )) (description (text_blob id_t)) (description (text_blob ;)) (description (text_blob \n)) (description (text_blob   )) (description (text_blob \n)) (description (text_blob   )) (description (text_blob id_t1)) (description (text_blob        )) (description (text_blob aw_id)) (description (text_blob ;)) (description (text_blob \n)) (description (text_blob    )) (description (text_blob \n)) (description (text_blob   )) (description (text_blob modport)) (description (text_blob  )) (description (text_blob Master)) (description (text_blob  )) (description (text_blob ()) (description (text_blob \n)) (description (text_blob     )) (description (text_blob output)) (description (text_blob  )) (description (text_blob aw_id)) (description (text_blob \n)) (description (text_blob   )) (description (text_blob ))) (description (text_blob ;)) (description (text_blob \n)) (description (text_blob \n)) (description (text_blob   )) (description (text_blob id_t)) (description (text_blob        )) (description (text_blob rw_id)) (description (text_blob ;)) (description (text_blob \n)) (description (text_blob    )) (description (text_blob \n)) (description (text_blob   )) (description (text_blob modport)) (description (text_blob  )) (description (text_blob Slave)) (description (text_blob  )) (description (text_blob ()) (description (text_blob \n)) (description (text_blob     )) (description (text_blob output)) (description (text_blob  )) (description (text_blob ww_id)) (description (text_blob \n)) (description (text_blob   )) (description (text_blob ))) (description (text_blob ;)) (description (text_blob \n)) (description (text_blob \n)) (description (endinterface endinterface)) (description (text_blob \n)) (description (text_blob \n)) (description (text_blob \n)) (description (sv_interface interface)) (description (text_blob  )) (description (text_blob mem_if)) (description (text_blob  )) (description (text_blob ()) (description (text_blob input)) (description (text_blob  )) (description (text_blob wire)) (description (text_blob  )) (description (text_blob clk)) (description (text_blob ))) (description (text_blob ;)) (description (text_blob \n)) (description (text_blob \n)) (description (text_blob   )) (description (text_blob modport)) (description (text_blob   )) (description (text_blob system)) (description (text_blob  )) (description (text_blob ()) (description (text_blob input)) (description (text_blob  )) (description (text_blob clk)) (description (text_blob ))) (description (text_blob ;)) (description (text_blob \n)) (description (text_blob   )) (description (text_blob modport)) (description (text_blob   )) (description (text_blob memory)) (description (text_blob  )) (description (text_blob ()) (description (text_blob output)) (description (text_blob  )) (description (text_blob clk)) (description (text_blob ))) (description (text_blob ;)) (description (text_blob \n)) (description (text_blob  )) (description (text_blob \n)) (description (endinterface endinterface)) (description (text_blob \n)) (description (text_blob \n)) (description (module module)) (description (text_blob  )) (description (text_blob memory_ctrl1)) (description (text_blob  )) (description (text_blob ()) (description (text_blob mem_if)) (description (text_blob .)) (description (text_blob system1)) (description (text_blob  )) (description (text_blob sif)) (description (text_blob ))) (description (text_blob ;)) (description (text_blob \n)) (description (text_blob \n)) (description (text_blob typedef)) (description (text_blob   )) (description (text_blob enum)) (description (text_blob  )) (description (text_blob {)) (description (text_blob IDLE)) (description (text_blob ,)) (description (text_blob WRITE)) (description (text_blob ,)) (description (text_blob READ)) (description (text_blob ,)) (description (text_blob DONE)) (description (text_blob })) (description (text_blob  )) (description (text_blob fsm_t)) (description (text_blob ;)) (description (text_blob \n)) (description (text_blob \n)) (description (text_blob fsm_t)) (description (text_blob  )) (description (text_blob state)) (description (text_blob ;)) (description (text_blob \n)) (description (text_blob \n)) (description (text_blob \n)) (description (endmodule endmodule)) (description (text_blob \n)) (description (text_blob \n)) (description (module module)) (description (text_blob  )) (description (text_blob memory_ctrl2)) (description (text_blob  )) (description (text_blob ()) (description (text_blob mem_if)) (description (text_blob .)) (description (text_blob system)) (description (text_blob  )) (description (text_blob sif)) (description (text_blob ))) (description (text_blob ;)) (description (text_blob \n)) (description (text_blob \n)) (description (text_blob typedef)) (description (text_blob   )) (description (text_blob enum)) (description (text_blob  )) (description (text_blob {)) (description (text_blob IDLE)) (description (text_blob ,)) (description (text_blob WRITE)) (description (text_blob ,)) (description (text_blob READ)) (description (text_blob ,)) (description (text_blob DONE)) (description (text_blob })) (description (text_blob  )) (description (text_blob fsm_t)) (description (text_blob ;)) (description (text_blob \n)) (description (text_blob \n)) (description (text_blob fsm_t)) (description (text_blob  )) (description (text_blob state)) (description (text_blob ;)) (description (text_blob \n)) (description (text_blob \n)) (description (text_blob DD)) (description (text_blob  )) (description (text_blob t)) (description (text_blob ;)) (description (text_blob \n)) (description (text_blob \n)) (description (endmodule endmodule)) (description (text_blob \n)) (description (text_blob \n)) (description (text_blob \n))) <EOF>)

[WARNI:PA0205] top.v:1: No timescale set for "dff0_test".

[WARNI:PA0205] top.v:8: No timescale set for "AXI_BUS".

[WARNI:PA0205] top.v:29: No timescale set for "mem_if".

[WARNI:PA0205] top.v:36: No timescale set for "memory_ctrl1".

[WARNI:PA0205] top.v:45: No timescale set for "memory_ctrl2".

[INFO :CP0300] Compilation...

[INFO :CP0304] top.v:8: Compile interface "work@AXI_BUS".

[INFO :CP0303] top.v:1: Compile module "work@dff0_test".

[INFO :CP0304] top.v:29: Compile interface "work@mem_if".

[INFO :CP0303] top.v:36: Compile module "work@memory_ctrl1".

[INFO :CP0303] top.v:45: Compile module "work@memory_ctrl2".

[ERROR:CP0311] top.v:23: Undefined port used in modport: "ww_id".

[INFO :EL0526] Design Elaboration...

[NOTE :EL0503] top.v:1: Top level module "work@dff0_test".

[NOTE :EL0503] top.v:36: Top level module "work@memory_ctrl1".

[NOTE :EL0503] top.v:45: Top level module "work@memory_ctrl2".

[NOTE :EL0504] Multiple top level modules in design.

[ERROR:CP0317] top.v:14: Undefined type "id_t1".

[ERROR:CP0317] top.v:36: Undefined type "mem_if.system1".

[ERROR:CP0317] top.v:51: Undefined type "DD".

[NOTE :EL0508] Nb Top level modules: 3.

[NOTE :EL0509] Max instance depth: 1.

[NOTE :EL0510] Nb instances: 3.

[NOTE :EL0511] Nb leaf instances: 3.

[  FATAL] : 0
[ SYNTAX] : 0
[  ERROR] : 4
[WARNING] : 5
[   NOTE] : 8


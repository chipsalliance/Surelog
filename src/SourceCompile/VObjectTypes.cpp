
#include <string>
#include "Design/VObject.h"
// This file is automatically generated by generate_parser_listener.tcl
// DO NOT EDIT

using namespace SURELOG;

std::string VObject::getTypeName(unsigned short type) {
    std::string text;
    switch (type) {
    case sl0:
      text = "sl0";
      break;
    case sl1:
      text = "sl1";
      break;
    case slAccelerate_directive:
      text = "slAccelerate_directive";
      break;
    case slACCEPT_ON:
      text = "slACCEPT_ON";
      break;
    case slAction_block:
      text = "slAction_block";
      break;
    case slActual_arg_expr:
      text = "slActual_arg_expr";
      break;
    case slActual_arg_list:
      text = "slActual_arg_list";
      break;
    case slALWAYS:
      text = "slALWAYS";
      break;
    case slAlways_construct:
      text = "slAlways_construct";
      break;
    case slAlwaysKeywd_Always:
      text = "slAlwaysKeywd_Always";
      break;
    case slAlwaysKeywd_Comb:
      text = "slAlwaysKeywd_Comb";
      break;
    case slAlwaysKeywd_FF:
      text = "slAlwaysKeywd_FF";
      break;
    case slAlwaysKeywd_Latch:
      text = "slAlwaysKeywd_Latch";
      break;
    case slAND:
      text = "slAND";
      break;
    case slAnd_call:
      text = "slAnd_call";
      break;
    case slAnonymous_program:
      text = "slAnonymous_program";
      break;
    case slAnonymous_program_item:
      text = "slAnonymous_program_item";
      break;
    case slAnsi_port_declaration:
      text = "slAnsi_port_declaration";
      break;
    case slArray_manipulation_call:
      text = "slArray_manipulation_call";
      break;
    case slArray_member_label:
      text = "slArray_member_label";
      break;
    case slArray_method_name:
      text = "slArray_method_name";
      break;
    case slArray_pattern_key:
      text = "slArray_pattern_key";
      break;
    case slArray_range_expression:
      text = "slArray_range_expression";
      break;
    case slAssert_property_statement:
      text = "slAssert_property_statement";
      break;
    case slAssertion_item:
      text = "slAssertion_item";
      break;
    case slAssertion_item_declaration:
      text = "slAssertion_item_declaration";
      break;
    case slAssertion_variable_declaration:
      text = "slAssertion_variable_declaration";
      break;
    case slAssign:
      text = "slAssign";
      break;
    case slAssignment_operator:
      text = "slAssignment_operator";
      break;
    case slAssignment_pattern:
      text = "slAssignment_pattern";
      break;
    case slAssignment_pattern_expression:
      text = "slAssignment_pattern_expression";
      break;
    case slAssignment_pattern_expression_type:
      text = "slAssignment_pattern_expression_type";
      break;
    case slAssignment_pattern_key:
      text = "slAssignment_pattern_key";
      break;
    case slAssignment_pattern_net_lvalue:
      text = "slAssignment_pattern_net_lvalue";
      break;
    case slAssignment_pattern_variable_lvalue:
      text = "slAssignment_pattern_variable_lvalue";
      break;
    case slAssignOp_Add:
      text = "slAssignOp_Add";
      break;
    case slAssignOp_ArithShiftLeft:
      text = "slAssignOp_ArithShiftLeft";
      break;
    case slAssignOp_ArithShiftRight:
      text = "slAssignOp_ArithShiftRight";
      break;
    case slAssignOp_Assign:
      text = "slAssignOp_Assign";
      break;
    case slAssignOp_BitwAnd:
      text = "slAssignOp_BitwAnd";
      break;
    case slAssignOp_BitwLeftShift:
      text = "slAssignOp_BitwLeftShift";
      break;
    case slAssignOp_BitwOr:
      text = "slAssignOp_BitwOr";
      break;
    case slAssignOp_BitwRightShift:
      text = "slAssignOp_BitwRightShift";
      break;
    case slAssignOp_BitwXor:
      text = "slAssignOp_BitwXor";
      break;
    case slAssignOp_Div:
      text = "slAssignOp_Div";
      break;
    case slAssignOp_Modulo:
      text = "slAssignOp_Modulo";
      break;
    case slAssignOp_Mult:
      text = "slAssignOp_Mult";
      break;
    case slAssignOp_Sub:
      text = "slAssignOp_Sub";
      break;
    case slAssociative_dimension:
      text = "slAssociative_dimension";
      break;
    case slAssume_property_statement:
      text = "slAssume_property_statement";
      break;
    case slAttr_name:
      text = "slAttr_name";
      break;
    case slAttr_spec:
      text = "slAttr_spec";
      break;
    case slAttribute_instance:
      text = "slAttribute_instance";
      break;
    case slAutoexpand_vectornets_directive:
      text = "slAutoexpand_vectornets_directive";
      break;
    case slBegin_keywords_directive:
      text = "slBegin_keywords_directive";
      break;
    case slBind_directive:
      text = "slBind_directive";
      break;
    case slBind_instantiation:
      text = "slBind_instantiation";
      break;
    case slBinModOp_BitwAnd:
      text = "slBinModOp_BitwAnd";
      break;
    case slBinModOp_BitwOr:
      text = "slBinModOp_BitwOr";
      break;
    case slBinModOp_BitwXor:
      text = "slBinModOp_BitwXor";
      break;
    case slBinModOp_Equiv:
      text = "slBinModOp_Equiv";
      break;
    case slBinModOp_LogicAnd:
      text = "slBinModOp_LogicAnd";
      break;
    case slBinModOp_LogicOr:
      text = "slBinModOp_LogicOr";
      break;
    case slBinModOp_NotEqual:
      text = "slBinModOp_NotEqual";
      break;
    case slBinModOp_ReductXnor1:
      text = "slBinModOp_ReductXnor1";
      break;
    case slBinModOp_ReductXnor2:
      text = "slBinModOp_ReductXnor2";
      break;
    case slBinOp_ArithShiftLeft:
      text = "slBinOp_ArithShiftLeft";
      break;
    case slBinOp_ArithShiftRight:
      text = "slBinOp_ArithShiftRight";
      break;
    case slBinOp_BitwAnd:
      text = "slBinOp_BitwAnd";
      break;
    case slBinOp_BitwOr:
      text = "slBinOp_BitwOr";
      break;
    case slBinOp_BitwXor:
      text = "slBinOp_BitwXor";
      break;
    case slBinOp_Div:
      text = "slBinOp_Div";
      break;
    case slBinOp_Equiv:
      text = "slBinOp_Equiv";
      break;
    case slBinOp_Equivalence:
      text = "slBinOp_Equivalence";
      break;
    case slBinOp_FourStateLogicEqual:
      text = "slBinOp_FourStateLogicEqual";
      break;
    case slBinOp_FourStateLogicNotEqual:
      text = "slBinOp_FourStateLogicNotEqual";
      break;
    case slBinOp_Great:
      text = "slBinOp_Great";
      break;
    case slBinOp_GreatEqual:
      text = "slBinOp_GreatEqual";
      break;
    case slBinOp_Imply:
      text = "slBinOp_Imply";
      break;
    case slBinOp_Less:
      text = "slBinOp_Less";
      break;
    case slBinOp_LessEqual:
      text = "slBinOp_LessEqual";
      break;
    case slBinOp_LogicAnd:
      text = "slBinOp_LogicAnd";
      break;
    case slBinOp_LogicOr:
      text = "slBinOp_LogicOr";
      break;
    case slBinOp_Minus:
      text = "slBinOp_Minus";
      break;
    case slBinOp_Mult:
      text = "slBinOp_Mult";
      break;
    case slBinOp_MultMult:
      text = "slBinOp_MultMult";
      break;
    case slBinOp_Not:
      text = "slBinOp_Not";
      break;
    case slBinOp_Percent:
      text = "slBinOp_Percent";
      break;
    case slBinOp_Plus:
      text = "slBinOp_Plus";
      break;
    case slBinOp_ReductNand:
      text = "slBinOp_ReductNand";
      break;
    case slBinOp_ReductNor:
      text = "slBinOp_ReductNor";
      break;
    case slBinOp_ReductXnor1:
      text = "slBinOp_ReductXnor1";
      break;
    case slBinOp_ReductXnor2:
      text = "slBinOp_ReductXnor2";
      break;
    case slBinOp_ShiftLeft:
      text = "slBinOp_ShiftLeft";
      break;
    case slBinOp_ShiftRight:
      text = "slBinOp_ShiftRight";
      break;
    case slBinOp_WildcardEqual:
      text = "slBinOp_WildcardEqual";
      break;
    case slBinOp_WildcardNotEqual:
      text = "slBinOp_WildcardNotEqual";
      break;
    case slBinOp_WildEqual:
      text = "slBinOp_WildEqual";
      break;
    case slBinOp_WildNotEqual:
      text = "slBinOp_WildNotEqual";
      break;
    case slBins_Bins:
      text = "slBins_Bins";
      break;
    case slBins_expression:
      text = "slBins_expression";
      break;
    case slBins_Ignore:
      text = "slBins_Ignore";
      break;
    case slBins_Illegal:
      text = "slBins_Illegal";
      break;
    case slBins_or_empty:
      text = "slBins_or_empty";
      break;
    case slBins_or_options:
      text = "slBins_or_options";
      break;
    case slBins_selection:
      text = "slBins_selection";
      break;
    case slBins_selection_or_option:
      text = "slBins_selection_or_option";
      break;
    case slBit_select:
      text = "slBit_select";
      break;
    case slBlock_event_expression:
      text = "slBlock_event_expression";
      break;
    case slBlock_item_declaration:
      text = "slBlock_item_declaration";
      break;
    case slBlocking_assignment:
      text = "slBlocking_assignment";
      break;
    case slBoolean_abbrev:
      text = "slBoolean_abbrev";
      break;
    case slBreakStmt:
      text = "slBreakStmt";
      break;
    case slBuilt_in_method_call:
      text = "slBuilt_in_method_call";
      break;
    case slCase:
      text = "slCase";
      break;
    case slCase_generate_construct:
      text = "slCase_generate_construct";
      break;
    case slCase_generate_item:
      text = "slCase_generate_item";
      break;
    case slCase_inside_item:
      text = "slCase_inside_item";
      break;
    case slCase_item:
      text = "slCase_item";
      break;
    case slCase_keyword:
      text = "slCase_keyword";
      break;
    case slCase_pattern_item:
      text = "slCase_pattern_item";
      break;
    case slCase_statement:
      text = "slCase_statement";
      break;
    case slCaseX:
      text = "slCaseX";
      break;
    case slCaseZ:
      text = "slCaseZ";
      break;
    case slCast:
      text = "slCast";
      break;
    case slCasting_type:
      text = "slCasting_type";
      break;
    case slCell_clause:
      text = "slCell_clause";
      break;
    case slCelldefine_directive:
      text = "slCelldefine_directive";
      break;
    case slChandle_type:
      text = "slChandle_type";
      break;
    case slCharge_strength:
      text = "slCharge_strength";
      break;
    case slChecker:
      text = "slChecker";
      break;
    case slChecker_declaration:
      text = "slChecker_declaration";
      break;
    case slChecker_generate_item:
      text = "slChecker_generate_item";
      break;
    case slChecker_instantiation:
      text = "slChecker_instantiation";
      break;
    case slChecker_or_generate_item:
      text = "slChecker_or_generate_item";
      break;
    case slChecker_or_generate_item_declaration:
      text = "slChecker_or_generate_item_declaration";
      break;
    case slChecker_port_item:
      text = "slChecker_port_item";
      break;
    case slChecker_port_list:
      text = "slChecker_port_list";
      break;
    case slClass:
      text = "slClass";
      break;
    case slClass_constraint:
      text = "slClass_constraint";
      break;
    case slClass_constructor_declaration:
      text = "slClass_constructor_declaration";
      break;
    case slClass_constructor_prototype:
      text = "slClass_constructor_prototype";
      break;
    case slClass_declaration:
      text = "slClass_declaration";
      break;
    case slClass_item:
      text = "slClass_item";
      break;
    case slClass_keyword:
      text = "slClass_keyword";
      break;
    case slClass_method:
      text = "slClass_method";
      break;
    case slClass_new:
      text = "slClass_new";
      break;
    case slClass_property:
      text = "slClass_property";
      break;
    case slClass_scope:
      text = "slClass_scope";
      break;
    case slClass_type:
      text = "slClass_type";
      break;
    case slClassItemQualifier_Local:
      text = "slClassItemQualifier_Local";
      break;
    case slClassItemQualifier_Protected:
      text = "slClassItemQualifier_Protected";
      break;
    case slClassItemQualifier_Static:
      text = "slClassItemQualifier_Static";
      break;
    case slClocking_decl_assign:
      text = "slClocking_decl_assign";
      break;
    case slClocking_declaration:
      text = "slClocking_declaration";
      break;
    case slClocking_drive:
      text = "slClocking_drive";
      break;
    case slClocking_event:
      text = "slClocking_event";
      break;
    case slClocking_item:
      text = "slClocking_item";
      break;
    case slClocking_skew:
      text = "slClocking_skew";
      break;
    case slClockingDir_Inout:
      text = "slClockingDir_Inout";
      break;
    case slClockingDir_Input:
      text = "slClockingDir_Input";
      break;
    case slClockingDir_InputOutput:
      text = "slClockingDir_InputOutput";
      break;
    case slClockingDir_Output:
      text = "slClockingDir_Output";
      break;
    case slClockvar:
      text = "slClockvar";
      break;
    case slClockvar_expression:
      text = "slClockvar_expression";
      break;
    case slCmos_switch_instance:
      text = "slCmos_switch_instance";
      break;
    case slCmosSwitchType_Cmos:
      text = "slCmosSwitchType_Cmos";
      break;
    case slCmosSwitchType_RCmos:
      text = "slCmosSwitchType_RCmos";
      break;
    case slColumnPartSelectOp:
      text = "slColumnPartSelectOp";
      break;
    case slCombinational_body:
      text = "slCombinational_body";
      break;
    case slCombinational_entry:
      text = "slCombinational_entry";
      break;
    case slComma_operator:
      text = "slComma_operator";
      break;
    case slComments:
      text = "slComments";
      break;
    case slComplex_func_call:
      text = "slComplex_func_call";
      break;
    case slConcatenation:
      text = "slConcatenation";
      break;
    case slConcurrent_assertion_item:
      text = "slConcurrent_assertion_item";
      break;
    case slConcurrent_assertion_item_declaration:
      text = "slConcurrent_assertion_item_declaration";
      break;
    case slConcurrent_assertion_statement:
      text = "slConcurrent_assertion_statement";
      break;
    case slCond_predicate:
      text = "slCond_predicate";
      break;
    case slConditional_generate_construct:
      text = "slConditional_generate_construct";
      break;
    case slConditional_operator:
      text = "slConditional_operator";
      break;
    case slConditional_statement:
      text = "slConditional_statement";
      break;
    case slConfig:
      text = "slConfig";
      break;
    case slConfig_declaration:
      text = "slConfig_declaration";
      break;
    case slConfig_rule_statement:
      text = "slConfig_rule_statement";
      break;
    case slConsecutive_repetition:
      text = "slConsecutive_repetition";
      break;
    case slConst_or_range_expression:
      text = "slConst_or_range_expression";
      break;
    case slConst_type:
      text = "slConst_type";
      break;
    case slConstant_assignment_pattern_expression:
      text = "slConstant_assignment_pattern_expression";
      break;
    case slConstant_bit_select:
      text = "slConstant_bit_select";
      break;
    case slConstant_cast:
      text = "slConstant_cast";
      break;
    case slConstant_concatenation:
      text = "slConstant_concatenation";
      break;
    case slConstant_expression:
      text = "slConstant_expression";
      break;
    case slConstant_indexed_range:
      text = "slConstant_indexed_range";
      break;
    case slConstant_mintypmax_expression:
      text = "slConstant_mintypmax_expression";
      break;
    case slConstant_multiple_concatenation:
      text = "slConstant_multiple_concatenation";
      break;
    case slConstant_param_expression:
      text = "slConstant_param_expression";
      break;
    case slConstant_part_select_range:
      text = "slConstant_part_select_range";
      break;
    case slConstant_primary:
      text = "slConstant_primary";
      break;
    case slConstant_range:
      text = "slConstant_range";
      break;
    case slConstant_range_expression:
      text = "slConstant_range_expression";
      break;
    case slConstant_select:
      text = "slConstant_select";
      break;
    case slConstantSelect:
      text = "slConstantSelect";
      break;
    case slConstraint_block:
      text = "slConstraint_block";
      break;
    case slConstraint_block_item:
      text = "slConstraint_block_item";
      break;
    case slConstraint_declaration:
      text = "slConstraint_declaration";
      break;
    case slConstraint_expression:
      text = "slConstraint_expression";
      break;
    case slConstraint_primary:
      text = "slConstraint_primary";
      break;
    case slConstraint_prototype:
      text = "slConstraint_prototype";
      break;
    case slConstraint_set:
      text = "slConstraint_set";
      break;
    case slConstSelect:
      text = "slConstSelect";
      break;
    case slContext_keyword:
      text = "slContext_keyword";
      break;
    case slContinueStmt:
      text = "slContinueStmt";
      break;
    case slContinuous_assign:
      text = "slContinuous_assign";
      break;
    case slControlled_timing_check_event:
      text = "slControlled_timing_check_event";
      break;
    case slCover_cross:
      text = "slCover_cross";
      break;
    case slCover_point:
      text = "slCover_point";
      break;
    case slCover_property_statement:
      text = "slCover_property_statement";
      break;
    case slCover_sequence_statement:
      text = "slCover_sequence_statement";
      break;
    case slCoverage_event:
      text = "slCoverage_event";
      break;
    case slCoverage_option:
      text = "slCoverage_option";
      break;
    case slCoverage_spec:
      text = "slCoverage_spec";
      break;
    case slCoverage_spec_or_option:
      text = "slCoverage_spec_or_option";
      break;
    case slCovergroup_declaration:
      text = "slCovergroup_declaration";
      break;
    case slCR:
      text = "slCR";
      break;
    case slCross_body:
      text = "slCross_body";
      break;
    case slCross_body_item:
      text = "slCross_body_item";
      break;
    case slCross_item:
      text = "slCross_item";
      break;
    case slCycle_delay:
      text = "slCycle_delay";
      break;
    case slCycle_delay_const_range_expression:
      text = "slCycle_delay_const_range_expression";
      break;
    case slCycle_delay_range:
      text = "slCycle_delay_range";
      break;
    case slData_declaration:
      text = "slData_declaration";
      break;
    case slData_type:
      text = "slData_type";
      break;
    case slData_type_or_implicit:
      text = "slData_type_or_implicit";
      break;
    case slData_type_or_void:
      text = "slData_type_or_void";
      break;
    case slDeassign:
      text = "slDeassign";
      break;
    case slDecPartSelectOp:
      text = "slDecPartSelectOp";
      break;
    case slDefault:
      text = "slDefault";
      break;
    case slDefault_clause:
      text = "slDefault_clause";
      break;
    case slDefault_decay_time_directive:
      text = "slDefault_decay_time_directive";
      break;
    case slDefault_nettype_directive:
      text = "slDefault_nettype_directive";
      break;
    case slDefault_trireg_strenght_directive:
      text = "slDefault_trireg_strenght_directive";
      break;
    case slDefault_value:
      text = "slDefault_value";
      break;
    case slDefaultSkew_Intput:
      text = "slDefaultSkew_Intput";
      break;
    case slDefaultSkew_IntputOutput:
      text = "slDefaultSkew_IntputOutput";
      break;
    case slDefaultSkew_Output:
      text = "slDefaultSkew_Output";
      break;
    case slDeferred_immediate_assert_statement:
      text = "slDeferred_immediate_assert_statement";
      break;
    case slDeferred_immediate_assertion_item:
      text = "slDeferred_immediate_assertion_item";
      break;
    case slDeferred_immediate_assertion_statement:
      text = "slDeferred_immediate_assertion_statement";
      break;
    case slDeferred_immediate_assume_statement:
      text = "slDeferred_immediate_assume_statement";
      break;
    case slDeferred_immediate_cover_statement:
      text = "slDeferred_immediate_cover_statement";
      break;
    case slDefine_directive:
      text = "slDefine_directive";
      break;
    case slDefparam_assignment:
      text = "slDefparam_assignment";
      break;
    case slDelay2:
      text = "slDelay2";
      break;
    case slDelay3:
      text = "slDelay3";
      break;
    case slDelay_control:
      text = "slDelay_control";
      break;
    case slDelay_mode_distributed_directive:
      text = "slDelay_mode_distributed_directive";
      break;
    case slDelay_mode_path_directive:
      text = "slDelay_mode_path_directive";
      break;
    case slDelay_mode_unit_directive:
      text = "slDelay_mode_unit_directive";
      break;
    case slDelay_mode_zero_directive:
      text = "slDelay_mode_zero_directive";
      break;
    case slDelay_or_event_control:
      text = "slDelay_or_event_control";
      break;
    case slDelay_value:
      text = "slDelay_value";
      break;
    case slDelayed_data:
      text = "slDelayed_data";
      break;
    case slDelayed_reference:
      text = "slDelayed_reference";
      break;
    case slDescription:
      text = "slDescription";
      break;
    case slDesign_statement:
      text = "slDesign_statement";
      break;
    case slDirective_in_macro:
      text = "slDirective_in_macro";
      break;
    case slDisable_portfaults_directive:
      text = "slDisable_portfaults_directive";
      break;
    case slDisable_statement:
      text = "slDisable_statement";
      break;
    case slDist_item:
      text = "slDist_item";
      break;
    case slDist_list:
      text = "slDist_list";
      break;
    case slDistWeight_AssignRange:
      text = "slDistWeight_AssignRange";
      break;
    case slDistWeight_AssignValue:
      text = "slDistWeight_AssignValue";
      break;
    case slDo:
      text = "slDo";
      break;
    case slDollar_fullskew_timing_check:
      text = "slDollar_fullskew_timing_check";
      break;
    case slDollar_hold_timing_check:
      text = "slDollar_hold_timing_check";
      break;
    case slDollar_keyword:
      text = "slDollar_keyword";
      break;
    case slDollar_nochange_timing_check:
      text = "slDollar_nochange_timing_check";
      break;
    case slDollar_period_timing_check:
      text = "slDollar_period_timing_check";
      break;
    case slDollar_recovery_timing_check:
      text = "slDollar_recovery_timing_check";
      break;
    case slDollar_recrem_timing_check:
      text = "slDollar_recrem_timing_check";
      break;
    case slDollar_removal_timing_check:
      text = "slDollar_removal_timing_check";
      break;
    case slDollar_root_keyword:
      text = "slDollar_root_keyword";
      break;
    case slDollar_setup_timing_check:
      text = "slDollar_setup_timing_check";
      break;
    case slDollar_setuphold_timing_check:
      text = "slDollar_setuphold_timing_check";
      break;
    case slDollar_skew_timing_check:
      text = "slDollar_skew_timing_check";
      break;
    case slDollar_timeskew_timing_check:
      text = "slDollar_timeskew_timing_check";
      break;
    case slDollar_width_timing_check:
      text = "slDollar_width_timing_check";
      break;
    case slDot:
      text = "slDot";
      break;
    case slDotStar:
      text = "slDotStar";
      break;
    case slDpi_import_export:
      text = "slDpi_import_export";
      break;
    case slDrive_strength:
      text = "slDrive_strength";
      break;
    case slDynamic_array_new:
      text = "slDynamic_array_new";
      break;
    case slEdge_control_specifier:
      text = "slEdge_control_specifier";
      break;
    case slEdge_descriptor:
      text = "slEdge_descriptor";
      break;
    case slEdge_Edge:
      text = "slEdge_Edge";
      break;
    case slEdge_indicator:
      text = "slEdge_indicator";
      break;
    case slEdge_input_list:
      text = "slEdge_input_list";
      break;
    case slEdge_Negedge:
      text = "slEdge_Negedge";
      break;
    case slEdge_Posedge:
      text = "slEdge_Posedge";
      break;
    case slEdge_sensitive_path_declaration:
      text = "slEdge_sensitive_path_declaration";
      break;
    case slEdge_symbol:
      text = "slEdge_symbol";
      break;
    case slElaboration_system_task:
      text = "slElaboration_system_task";
      break;
    case slElse:
      text = "slElse";
      break;
    case slElse_directive:
      text = "slElse_directive";
      break;
    case slElseif_directive:
      text = "slElseif_directive";
      break;
    case slElseif_directive_in_macro_body:
      text = "slElseif_directive_in_macro_body";
      break;
    case slElsif_directive:
      text = "slElsif_directive";
      break;
    case slElsif_directive_in_macro_body:
      text = "slElsif_directive_in_macro_body";
      break;
    case slEmpty_queue:
      text = "slEmpty_queue";
      break;
    case slEnable_gate_instance:
      text = "slEnable_gate_instance";
      break;
    case slEnable_portfaults_directive:
      text = "slEnable_portfaults_directive";
      break;
    case slEnableGateType_Bufif0:
      text = "slEnableGateType_Bufif0";
      break;
    case slEnableGateType_Bufif1:
      text = "slEnableGateType_Bufif1";
      break;
    case slEnableGateType_Notif0:
      text = "slEnableGateType_Notif0";
      break;
    case slEnableGateType_Notif1:
      text = "slEnableGateType_Notif1";
      break;
    case slEnd:
      text = "slEnd";
      break;
    case slEnd_edge_offset:
      text = "slEnd_edge_offset";
      break;
    case slEnd_keywords_directive:
      text = "slEnd_keywords_directive";
      break;
    case slEndcase:
      text = "slEndcase";
      break;
    case slEndcelldefine_directive:
      text = "slEndcelldefine_directive";
      break;
    case slEndchecker:
      text = "slEndchecker";
      break;
    case slEndclass:
      text = "slEndclass";
      break;
    case slEndclocking:
      text = "slEndclocking";
      break;
    case slEndconfig:
      text = "slEndconfig";
      break;
    case slEndfunction:
      text = "slEndfunction";
      break;
    case slEndgenerate:
      text = "slEndgenerate";
      break;
    case slEndgroup:
      text = "slEndgroup";
      break;
    case slEndif_directive:
      text = "slEndif_directive";
      break;
    case slEndinterface:
      text = "slEndinterface";
      break;
    case slEndmodule:
      text = "slEndmodule";
      break;
    case slEndpackage:
      text = "slEndpackage";
      break;
    case slEndprimitive:
      text = "slEndprimitive";
      break;
    case slEndprogram:
      text = "slEndprogram";
      break;
    case slEndproperty:
      text = "slEndproperty";
      break;
    case slEndprotect_directive:
      text = "slEndprotect_directive";
      break;
    case slEndprotected_directive:
      text = "slEndprotected_directive";
      break;
    case slEndsequence:
      text = "slEndsequence";
      break;
    case slEndspecify:
      text = "slEndspecify";
      break;
    case slEndtable:
      text = "slEndtable";
      break;
    case slEndtask:
      text = "slEndtask";
      break;
    case slEnum_base_type:
      text = "slEnum_base_type";
      break;
    case slEnum_keyword:
      text = "slEnum_keyword";
      break;
    case slEnum_name_declaration:
      text = "slEnum_name_declaration";
      break;
    case slEscaped_identifier:
      text = "slEscaped_identifier";
      break;
    case slEscaped_macro_definition_body:
      text = "slEscaped_macro_definition_body";
      break;
    case slEscaped_macro_definition_body_alt1:
      text = "slEscaped_macro_definition_body_alt1";
      break;
    case slEscaped_macro_definition_body_alt2:
      text = "slEscaped_macro_definition_body_alt2";
      break;
    case slEscapedCR:
      text = "slEscapedCR";
      break;
    case slEvent_based_flag:
      text = "slEvent_based_flag";
      break;
    case slEvent_control:
      text = "slEvent_control";
      break;
    case slEvent_expression:
      text = "slEvent_expression";
      break;
    case slEvent_trigger:
      text = "slEvent_trigger";
      break;
    case slEvent_type:
      text = "slEvent_type";
      break;
    case slEVENTUALLY:
      text = "slEVENTUALLY";
      break;
    case slEveryRule:
      text = "slEveryRule";
      break;
    case slExpand_vectornets_directive:
      text = "slExpand_vectornets_directive";
      break;
    case slExpect_property_statement:
      text = "slExpect_property_statement";
      break;
    case slExport:
      text = "slExport";
      break;
    case slExpression:
      text = "slExpression";
      break;
    case slExpression_or_cond_pattern:
      text = "slExpression_or_cond_pattern";
      break;
    case slExpression_or_dist:
      text = "slExpression_or_dist";
      break;
    case slExtends:
      text = "slExtends";
      break;
    case slExtern_constraint_declaration:
      text = "slExtern_constraint_declaration";
      break;
    case slExtern_qualifier:
      text = "slExtern_qualifier";
      break;
    case slExtern_tf_declaration:
      text = "slExtern_tf_declaration";
      break;
    case slFile_path_spec:
      text = "slFile_path_spec";
      break;
    case slFinal_construct:
      text = "slFinal_construct";
      break;
    case slFor:
      text = "slFor";
      break;
    case slFor_initialization:
      text = "slFor_initialization";
      break;
    case slFor_step:
      text = "slFor_step";
      break;
    case slFor_step_assignment:
      text = "slFor_step_assignment";
      break;
    case slFor_variable_declaration:
      text = "slFor_variable_declaration";
      break;
    case slForce:
      text = "slForce";
      break;
    case slForeach:
      text = "slForeach";
      break;
    case slForever:
      text = "slForever";
      break;
    case slFull_edge_sensitive_path_description:
      text = "slFull_edge_sensitive_path_description";
      break;
    case slFull_path_description:
      text = "slFull_path_description";
      break;
    case slFunction_body_declaration:
      text = "slFunction_body_declaration";
      break;
    case slFunction_data_type:
      text = "slFunction_data_type";
      break;
    case slFunction_data_type_or_implicit:
      text = "slFunction_data_type_or_implicit";
      break;
    case slFunction_declaration:
      text = "slFunction_declaration";
      break;
    case slFunction_name_decl:
      text = "slFunction_name_decl";
      break;
    case slFunction_prototype:
      text = "slFunction_prototype";
      break;
    case slFunction_statement_or_null:
      text = "slFunction_statement_or_null";
      break;
    case slGate_instantiation:
      text = "slGate_instantiation";
      break;
    case slGenerate_block:
      text = "slGenerate_block";
      break;
    case slGenerate_interface_block:
      text = "slGenerate_interface_block";
      break;
    case slGenerate_interface_case_statement:
      text = "slGenerate_interface_case_statement";
      break;
    case slGenerate_interface_conditional_statement:
      text = "slGenerate_interface_conditional_statement";
      break;
    case slGenerate_interface_item:
      text = "slGenerate_interface_item";
      break;
    case slGenerate_interface_loop_statement:
      text = "slGenerate_interface_loop_statement";
      break;
    case slGenerate_interface_named_block:
      text = "slGenerate_interface_named_block";
      break;
    case slGenerate_item:
      text = "slGenerate_item";
      break;
    case slGenerate_module_block:
      text = "slGenerate_module_block";
      break;
    case slGenerate_module_case_statement:
      text = "slGenerate_module_case_statement";
      break;
    case slGenerate_module_conditional_statement:
      text = "slGenerate_module_conditional_statement";
      break;
    case slGenerate_module_item:
      text = "slGenerate_module_item";
      break;
    case slGenerate_module_loop_statement:
      text = "slGenerate_module_loop_statement";
      break;
    case slGenerate_module_named_block:
      text = "slGenerate_module_named_block";
      break;
    case slGenerate_region:
      text = "slGenerate_region";
      break;
    case slGenerated_interface_instantiation:
      text = "slGenerated_interface_instantiation";
      break;
    case slGenerated_module_instantiation:
      text = "slGenerated_module_instantiation";
      break;
    case slGenericElementType:
      text = "slGenericElementType";
      break;
    case slGenvar_assignment:
      text = "slGenvar_assignment";
      break;
    case slGenvar_decl_assignment:
      text = "slGenvar_decl_assignment";
      break;
    case slGenvar_declaration:
      text = "slGenvar_declaration";
      break;
    case slGenvar_initialization:
      text = "slGenvar_initialization";
      break;
    case slGenvar_interface_case_item:
      text = "slGenvar_interface_case_item";
      break;
    case slGenvar_iteration:
      text = "slGenvar_iteration";
      break;
    case slGenvar_module_case_item:
      text = "slGenvar_module_case_item";
      break;
    case slGlobal:
      text = "slGlobal";
      break;
    case slGoto_repetition:
      text = "slGoto_repetition";
      break;
    case slHierarchical_btf_identifier:
      text = "slHierarchical_btf_identifier";
      break;
    case slHierarchical_identifier:
      text = "slHierarchical_identifier";
      break;
    case slHierarchical_instance:
      text = "slHierarchical_instance";
      break;
    case slHighZ0:
      text = "slHighZ0";
      break;
    case slHighZ1:
      text = "slHighZ1";
      break;
    case slIdentifier:
      text = "slIdentifier";
      break;
    case slIdentifier_in_macro_body:
      text = "slIdentifier_in_macro_body";
      break;
    case slIdentifier_list:
      text = "slIdentifier_list";
      break;
    case slIF:
      text = "slIF";
      break;
    case slIf_generate_construct:
      text = "slIf_generate_construct";
      break;
    case slIfdef_directive:
      text = "slIfdef_directive";
      break;
    case slIfdef_directive_in_macro_body:
      text = "slIfdef_directive_in_macro_body";
      break;
    case slIFF:
      text = "slIFF";
      break;
    case slIff:
      text = "slIff";
      break;
    case slIfndef_directive:
      text = "slIfndef_directive";
      break;
    case slIfndef_directive_in_macro_body:
      text = "slIfndef_directive_in_macro_body";
      break;
    case slImmediate_assertion_statement:
      text = "slImmediate_assertion_statement";
      break;
    case slImplements:
      text = "slImplements";
      break;
    case slImplicit_class_handle:
      text = "slImplicit_class_handle";
      break;
    case slImplicit_data_type:
      text = "slImplicit_data_type";
      break;
    case slIMPLIES:
      text = "slIMPLIES";
      break;
    case slImport:
      text = "slImport";
      break;
    case slInc_or_dec_expression:
      text = "slInc_or_dec_expression";
      break;
    case slInc_or_dec_operator:
      text = "slInc_or_dec_operator";
      break;
    case slIncDec_MinusMinus:
      text = "slIncDec_MinusMinus";
      break;
    case slIncDec_PlusPlus:
      text = "slIncDec_PlusPlus";
      break;
    case slInclude_directive:
      text = "slInclude_directive";
      break;
    case slInclude_statement:
      text = "slInclude_statement";
      break;
    case slIncPartSelectOp:
      text = "slIncPartSelectOp";
      break;
    case slIndexed_range:
      text = "slIndexed_range";
      break;
    case slInitial_construct:
      text = "slInitial_construct";
      break;
    case slInitVal_1TickB0:
      text = "slInitVal_1TickB0";
      break;
    case slInitVal_1Tickb0:
      text = "slInitVal_1Tickb0";
      break;
    case slInitVal_1TickB1:
      text = "slInitVal_1TickB1";
      break;
    case slInitVal_1Tickb1:
      text = "slInitVal_1Tickb1";
      break;
    case slInitVal_1TickBX:
      text = "slInitVal_1TickBX";
      break;
    case slInitVal_1TickBx:
      text = "slInitVal_1TickBx";
      break;
    case slInitVal_1TickbX:
      text = "slInitVal_1TickbX";
      break;
    case slInitVal_1Tickbx:
      text = "slInitVal_1Tickbx";
      break;
    case slInitVal_Integral:
      text = "slInitVal_Integral";
      break;
    case slInout_declaration:
      text = "slInout_declaration";
      break;
    case slInput_declaration:
      text = "slInput_declaration";
      break;
    case slInsideOp:
      text = "slInsideOp";
      break;
    case slInst_clause:
      text = "slInst_clause";
      break;
    case slInst_name:
      text = "slInst_name";
      break;
    case slIntConst:
      text = "slIntConst";
      break;
    case slInteger_type:
      text = "slInteger_type";
      break;
    case slIntegerAtomType_Byte:
      text = "slIntegerAtomType_Byte";
      break;
    case slIntegerAtomType_Int:
      text = "slIntegerAtomType_Int";
      break;
    case slIntegerAtomType_LongInt:
      text = "slIntegerAtomType_LongInt";
      break;
    case slIntegerAtomType_Shortint:
      text = "slIntegerAtomType_Shortint";
      break;
    case slIntegerAtomType_Time:
      text = "slIntegerAtomType_Time";
      break;
    case slInterface:
      text = "slInterface";
      break;
    case slInterface_ansi_header:
      text = "slInterface_ansi_header";
      break;
    case slInterface_class_declaration:
      text = "slInterface_class_declaration";
      break;
    case slInterface_class_item:
      text = "slInterface_class_item";
      break;
    case slInterface_class_keyword:
      text = "slInterface_class_keyword";
      break;
    case slInterface_class_method:
      text = "slInterface_class_method";
      break;
    case slInterface_class_type:
      text = "slInterface_class_type";
      break;
    case slInterface_declaration:
      text = "slInterface_declaration";
      break;
    case slInterface_identifier:
      text = "slInterface_identifier";
      break;
    case slInterface_instantiation:
      text = "slInterface_instantiation";
      break;
    case slInterface_item:
      text = "slInterface_item";
      break;
    case slInterface_nonansi_header:
      text = "slInterface_nonansi_header";
      break;
    case slInterface_or_generate_item:
      text = "slInterface_or_generate_item";
      break;
    case slInterface_port_declaration:
      text = "slInterface_port_declaration";
      break;
    case slInterface_port_header:
      text = "slInterface_port_header";
      break;
    case slIntVec_TypeBit:
      text = "slIntVec_TypeBit";
      break;
    case slIntVec_TypeLogic:
      text = "slIntVec_TypeLogic";
      break;
    case slIntVec_TypeReg:
      text = "slIntVec_TypeReg";
      break;
    case slJoin_any_keyword:
      text = "slJoin_any_keyword";
      break;
    case slJoin_keyword:
      text = "slJoin_keyword";
      break;
    case slJoin_none_keyword:
      text = "slJoin_none_keyword";
      break;
    case slJump_statement:
      text = "slJump_statement";
      break;
    case slLarge:
      text = "slLarge";
      break;
    case slLet_declaration:
      text = "slLet_declaration";
      break;
    case slLet_formal_type:
      text = "slLet_formal_type";
      break;
    case slLet_port_item:
      text = "slLet_port_item";
      break;
    case slLet_port_list:
      text = "slLet_port_list";
      break;
    case slLevel_input_list:
      text = "slLevel_input_list";
      break;
    case slLevel_symbol:
      text = "slLevel_symbol";
      break;
    case slLiblist_clause:
      text = "slLiblist_clause";
      break;
    case slLibrary_declaration:
      text = "slLibrary_declaration";
      break;
    case slLibrary_descriptions:
      text = "slLibrary_descriptions";
      break;
    case slLibrary_text:
      text = "slLibrary_text";
      break;
    case slLifetime_Automatic:
      text = "slLifetime_Automatic";
      break;
    case slLifetime_Static:
      text = "slLifetime_Static";
      break;
    case slLine_directive:
      text = "slLine_directive";
      break;
    case slList_of_arguments:
      text = "slList_of_arguments";
      break;
    case slList_of_checker_port_connections:
      text = "slList_of_checker_port_connections";
      break;
    case slList_of_clocking_decl_assign:
      text = "slList_of_clocking_decl_assign";
      break;
    case slList_of_cross_items:
      text = "slList_of_cross_items";
      break;
    case slList_of_defparam_assignments:
      text = "slList_of_defparam_assignments";
      break;
    case slList_of_interface_identifiers:
      text = "slList_of_interface_identifiers";
      break;
    case slList_of_net_assignments:
      text = "slList_of_net_assignments";
      break;
    case slList_of_net_decl_assignments:
      text = "slList_of_net_decl_assignments";
      break;
    case slList_of_param_assignments:
      text = "slList_of_param_assignments";
      break;
    case slList_of_parameter_assignments:
      text = "slList_of_parameter_assignments";
      break;
    case slList_of_path_delay_expressions:
      text = "slList_of_path_delay_expressions";
      break;
    case slList_of_path_inputs:
      text = "slList_of_path_inputs";
      break;
    case slList_of_path_outputs:
      text = "slList_of_path_outputs";
      break;
    case slList_of_port_connections:
      text = "slList_of_port_connections";
      break;
    case slList_of_port_declarations:
      text = "slList_of_port_declarations";
      break;
    case slList_of_port_identifiers:
      text = "slList_of_port_identifiers";
      break;
    case slList_of_ports:
      text = "slList_of_ports";
      break;
    case slList_of_specparam_assignments:
      text = "slList_of_specparam_assignments";
      break;
    case slList_of_tf_variable_identifiers:
      text = "slList_of_tf_variable_identifiers";
      break;
    case slList_of_type_assignments:
      text = "slList_of_type_assignments";
      break;
    case slList_of_variable_assignments:
      text = "slList_of_variable_assignments";
      break;
    case slList_of_variable_decl_assignments:
      text = "slList_of_variable_decl_assignments";
      break;
    case slList_of_variable_identifiers:
      text = "slList_of_variable_identifiers";
      break;
    case slList_of_variable_port_identifiers:
      text = "slList_of_variable_port_identifiers";
      break;
    case slList_of_virtual_interface_decl:
      text = "slList_of_virtual_interface_decl";
      break;
    case slLocal_parameter_declaration:
      text = "slLocal_parameter_declaration";
      break;
    case slLoop_generate_construct:
      text = "slLoop_generate_construct";
      break;
    case slLoop_statement:
      text = "slLoop_statement";
      break;
    case slLoop_variables:
      text = "slLoop_variables";
      break;
    case slMacro_actual_args:
      text = "slMacro_actual_args";
      break;
    case slMacro_arg:
      text = "slMacro_arg";
      break;
    case slMacro_arguments:
      text = "slMacro_arguments";
      break;
    case slMacro_definition:
      text = "slMacro_definition";
      break;
    case slMacroInstanceNoArgs:
      text = "slMacroInstanceNoArgs";
      break;
    case slMacroInstanceWithArgs:
      text = "slMacroInstanceWithArgs";
      break;
    case slMatches:
      text = "slMatches";
      break;
    case slMedium:
      text = "slMedium";
      break;
    case slMethod_call:
      text = "slMethod_call";
      break;
    case slMethod_call_body:
      text = "slMethod_call_body";
      break;
    case slMethod_call_root:
      text = "slMethod_call_root";
      break;
    case slMethod_prototype:
      text = "slMethod_prototype";
      break;
    case slMethodQualifier_ClassItem:
      text = "slMethodQualifier_ClassItem";
      break;
    case slMethodQualifier_Virtual:
      text = "slMethodQualifier_Virtual";
      break;
    case slMintypmax_expression:
      text = "slMintypmax_expression";
      break;
    case slModport_hierarchical_ports_declaration:
      text = "slModport_hierarchical_ports_declaration";
      break;
    case slModport_item:
      text = "slModport_item";
      break;
    case slModport_ports_declaration:
      text = "slModport_ports_declaration";
      break;
    case slModport_simple_port:
      text = "slModport_simple_port";
      break;
    case slModport_simple_ports_declaration:
      text = "slModport_simple_ports_declaration";
      break;
    case slModport_tf_port:
      text = "slModport_tf_port";
      break;
    case slModport_tf_ports_declaration:
      text = "slModport_tf_ports_declaration";
      break;
    case slModule:
      text = "slModule";
      break;
    case slModule_ansi_header:
      text = "slModule_ansi_header";
      break;
    case slModule_common_item:
      text = "slModule_common_item";
      break;
    case slModule_declaration:
      text = "slModule_declaration";
      break;
    case slModule_instantiation:
      text = "slModule_instantiation";
      break;
    case slModule_item:
      text = "slModule_item";
      break;
    case slModule_keyword:
      text = "slModule_keyword";
      break;
    case slModule_nonansi_header:
      text = "slModule_nonansi_header";
      break;
    case slModule_or_generate_item:
      text = "slModule_or_generate_item";
      break;
    case slModule_or_generate_item_declaration:
      text = "slModule_or_generate_item_declaration";
      break;
    case slModule_path_concatenation:
      text = "slModule_path_concatenation";
      break;
    case slModule_path_expression:
      text = "slModule_path_expression";
      break;
    case slModule_path_mintypmax_expression:
      text = "slModule_path_mintypmax_expression";
      break;
    case slModule_path_multiple_concatenation:
      text = "slModule_path_multiple_concatenation";
      break;
    case slModule_path_primary:
      text = "slModule_path_primary";
      break;
    case slModuleInstance:
      text = "slModuleInstance";
      break;
    case slMos_switch_instance:
      text = "slMos_switch_instance";
      break;
    case slMosSwitchType_NMos:
      text = "slMosSwitchType_NMos";
      break;
    case slMosSwitchType_PMos:
      text = "slMosSwitchType_PMos";
      break;
    case slMosSwitchType_RNMos:
      text = "slMosSwitchType_RNMos";
      break;
    case slMosSwitchType_RPMos:
      text = "slMosSwitchType_RPMos";
      break;
    case slMultiline_args_macro_definition:
      text = "slMultiline_args_macro_definition";
      break;
    case slMultiline_no_args_macro_definition:
      text = "slMultiline_no_args_macro_definition";
      break;
    case slMultiple_concatenation:
      text = "slMultiple_concatenation";
      break;
    case slN_input_gate_instance:
      text = "slN_input_gate_instance";
      break;
    case slN_output_gate_instance:
      text = "slN_output_gate_instance";
      break;
    case slName_of_instance:
      text = "slName_of_instance";
      break;
    case slNamed_checker_port_connection:
      text = "slNamed_checker_port_connection";
      break;
    case slNamed_parameter_assignment:
      text = "slNamed_parameter_assignment";
      break;
    case slNamed_port_connection:
      text = "slNamed_port_connection";
      break;
    case slNet_alias:
      text = "slNet_alias";
      break;
    case slNet_assignment:
      text = "slNet_assignment";
      break;
    case slNet_decl_assignment:
      text = "slNet_decl_assignment";
      break;
    case slNet_declaration:
      text = "slNet_declaration";
      break;
    case slNet_lvalue:
      text = "slNet_lvalue";
      break;
    case slNet_port_header:
      text = "slNet_port_header";
      break;
    case slNet_port_type:
      text = "slNet_port_type";
      break;
    case slNet_type:
      text = "slNet_type";
      break;
    case slNet_type_declaration:
      text = "slNet_type_declaration";
      break;
    case slNetType_Supply0:
      text = "slNetType_Supply0";
      break;
    case slNetType_Supply1:
      text = "slNetType_Supply1";
      break;
    case slNetType_Tri:
      text = "slNetType_Tri";
      break;
    case slNetType_Tri0:
      text = "slNetType_Tri0";
      break;
    case slNetType_Tri1:
      text = "slNetType_Tri1";
      break;
    case slNetType_TriAnd:
      text = "slNetType_TriAnd";
      break;
    case slNetType_TriOr:
      text = "slNetType_TriOr";
      break;
    case slNetType_TriReg:
      text = "slNetType_TriReg";
      break;
    case slNetType_Uwire:
      text = "slNetType_Uwire";
      break;
    case slNetType_Wand:
      text = "slNetType_Wand";
      break;
    case slNetType_Wire:
      text = "slNetType_Wire";
      break;
    case slNetType_Wor:
      text = "slNetType_Wor";
      break;
    case slNext_state:
      text = "slNext_state";
      break;
    case slNInpGate_And:
      text = "slNInpGate_And";
      break;
    case slNInpGate_Nand:
      text = "slNInpGate_Nand";
      break;
    case slNInpGate_Nor:
      text = "slNInpGate_Nor";
      break;
    case slNInpGate_Or:
      text = "slNInpGate_Or";
      break;
    case slNInpGate_Xnor:
      text = "slNInpGate_Xnor";
      break;
    case slNInpGate_Xor:
      text = "slNInpGate_Xor";
      break;
    case slNoaccelerate_directive:
      text = "slNoaccelerate_directive";
      break;
    case slNoexpand_vectornets_directive:
      text = "slNoexpand_vectornets_directive";
      break;
    case slNon_consecutive_repetition:
      text = "slNon_consecutive_repetition";
      break;
    case slNON_OVERLAP_IMPLY:
      text = "slNON_OVERLAP_IMPLY";
      break;
    case slNon_port_interface_item:
      text = "slNon_port_interface_item";
      break;
    case slNon_port_module_item:
      text = "slNon_port_module_item";
      break;
    case slNon_port_program_item:
      text = "slNon_port_program_item";
      break;
    case slNonblocking_assignment:
      text = "slNonblocking_assignment";
      break;
    case slNonBlockingTriggerEvent:
      text = "slNonBlockingTriggerEvent";
      break;
    case slNonIntType_Real:
      text = "slNonIntType_Real";
      break;
    case slNonIntType_RealTime:
      text = "slNonIntType_RealTime";
      break;
    case slNonIntType_ShortReal:
      text = "slNonIntType_ShortReal";
      break;
    case slNONOVERLAPPED:
      text = "slNONOVERLAPPED";
      break;
    case slNonrange_select:
      text = "slNonrange_select";
      break;
    case slNonrange_variable_lvalue:
      text = "slNonrange_variable_lvalue";
      break;
    case slNoremove_gatenames_directive:
      text = "slNoremove_gatenames_directive";
      break;
    case slNoremove_netnames_directive:
      text = "slNoremove_netnames_directive";
      break;
    case slNosuppress_faults_directive:
      text = "slNosuppress_faults_directive";
      break;
    case slNOT:
      text = "slNOT";
      break;
    case slNotifier:
      text = "slNotifier";
      break;
    case slNoType:
      text = "slNoType";
      break;
    case slNounconnected_drive_directive:
      text = "slNounconnected_drive_directive";
      break;
    case slNOutGate_Buf:
      text = "slNOutGate_Buf";
      break;
    case slNOutGate_Not:
      text = "slNOutGate_Not";
      break;
    case slNull:
      text = "slNull";
      break;
    case slNull_keyword:
      text = "slNull_keyword";
      break;
    case slNull_rule:
      text = "slNull_rule";
      break;
    case slNumber:
      text = "slNumber";
      break;
    case slNumber_1TickB0:
      text = "slNumber_1TickB0";
      break;
    case slNumber_1Tickb0:
      text = "slNumber_1Tickb0";
      break;
    case slNumber_1TickB1:
      text = "slNumber_1TickB1";
      break;
    case slNumber_1Tickb1:
      text = "slNumber_1Tickb1";
      break;
    case slNumber_1TickBX:
      text = "slNumber_1TickBX";
      break;
    case slNumber_1TickBx:
      text = "slNumber_1TickBx";
      break;
    case slNumber_1TickbX:
      text = "slNumber_1TickbX";
      break;
    case slNumber_1Tickbx:
      text = "slNumber_1Tickbx";
      break;
    case slNumber_Integral:
      text = "slNumber_Integral";
      break;
    case slNumber_Real:
      text = "slNumber_Real";
      break;
    case slNumber_Tick0:
      text = "slNumber_Tick0";
      break;
    case slNumber_Tick1:
      text = "slNumber_Tick1";
      break;
    case slNumber_TickB0:
      text = "slNumber_TickB0";
      break;
    case slNumber_Tickb0:
      text = "slNumber_Tickb0";
      break;
    case slNumber_TickB1:
      text = "slNumber_TickB1";
      break;
    case slNumber_Tickb1:
      text = "slNumber_Tickb1";
      break;
    case slOpen_range_list:
      text = "slOpen_range_list";
      break;
    case slOperator_assignment:
      text = "slOperator_assignment";
      break;
    case slOR:
      text = "slOR";
      break;
    case slOr_call:
      text = "slOr_call";
      break;
    case slOr_operator:
      text = "slOr_operator";
      break;
    case slOrdered_checker_port_connection:
      text = "slOrdered_checker_port_connection";
      break;
    case slOrdered_parameter_assignment:
      text = "slOrdered_parameter_assignment";
      break;
    case slOrdered_port_connection:
      text = "slOrdered_port_connection";
      break;
    case slOutput_declaration:
      text = "slOutput_declaration";
      break;
    case slOutput_symbol:
      text = "slOutput_symbol";
      break;
    case slOVERLAP_IMPLY:
      text = "slOVERLAP_IMPLY";
      break;
    case slOVERLAPPED:
      text = "slOVERLAPPED";
      break;
    case slOverload_declaration:
      text = "slOverload_declaration";
      break;
    case slOverload_proto_formals:
      text = "slOverload_proto_formals";
      break;
    case slOverloadOp_Div:
      text = "slOverloadOp_Div";
      break;
    case slOverloadOp_Equal:
      text = "slOverloadOp_Equal";
      break;
    case slOverloadOp_Equiv:
      text = "slOverloadOp_Equiv";
      break;
    case slOverloadOp_Greater:
      text = "slOverloadOp_Greater";
      break;
    case slOverloadOp_GreaterEqual:
      text = "slOverloadOp_GreaterEqual";
      break;
    case slOverloadOp_Less:
      text = "slOverloadOp_Less";
      break;
    case slOverloadOp_LessEqual:
      text = "slOverloadOp_LessEqual";
      break;
    case slOverloadOp_Minus:
      text = "slOverloadOp_Minus";
      break;
    case slOverloadOp_MinusMinus:
      text = "slOverloadOp_MinusMinus";
      break;
    case slOverloadOp_Mult:
      text = "slOverloadOp_Mult";
      break;
    case slOverloadOp_NotEqual:
      text = "slOverloadOp_NotEqual";
      break;
    case slOverloadOp_Percent:
      text = "slOverloadOp_Percent";
      break;
    case slOverloadOp_Plus:
      text = "slOverloadOp_Plus";
      break;
    case slOverloadOp_PlusPlus:
      text = "slOverloadOp_PlusPlus";
      break;
    case slOverloadOp_StarStar:
      text = "slOverloadOp_StarStar";
      break;
    case slPackage:
      text = "slPackage";
      break;
    case slPackage_declaration:
      text = "slPackage_declaration";
      break;
    case slPackage_export_declaration:
      text = "slPackage_export_declaration";
      break;
    case slPackage_import_declaration:
      text = "slPackage_import_declaration";
      break;
    case slPackage_import_item:
      text = "slPackage_import_item";
      break;
    case slPackage_item:
      text = "slPackage_item";
      break;
    case slPackage_or_generate_item_declaration:
      text = "slPackage_or_generate_item_declaration";
      break;
    case slPackage_scope:
      text = "slPackage_scope";
      break;
    case slPacked_dimension:
      text = "slPacked_dimension";
      break;
    case slPacked_keyword:
      text = "slPacked_keyword";
      break;
    case slPaired_parens:
      text = "slPaired_parens";
      break;
    case slPar_block:
      text = "slPar_block";
      break;
    case slParallel_edge_sensitive_path_description:
      text = "slParallel_edge_sensitive_path_description";
      break;
    case slParallel_path_description:
      text = "slParallel_path_description";
      break;
    case slParam_assignment:
      text = "slParam_assignment";
      break;
    case slParam_expression:
      text = "slParam_expression";
      break;
    case slParameter_declaration:
      text = "slParameter_declaration";
      break;
    case slParameter_override:
      text = "slParameter_override";
      break;
    case slParameter_port_declaration:
      text = "slParameter_port_declaration";
      break;
    case slParameter_port_list:
      text = "slParameter_port_list";
      break;
    case slParameter_value_assignment:
      text = "slParameter_value_assignment";
      break;
    case slPart_select_op:
      text = "slPart_select_op";
      break;
    case slPart_select_op_column:
      text = "slPart_select_op_column";
      break;
    case slPart_select_range:
      text = "slPart_select_range";
      break;
    case slPass_enable_switch_instance:
      text = "slPass_enable_switch_instance";
      break;
    case slPass_switch_instance:
      text = "slPass_switch_instance";
      break;
    case slPassEnSwitch_RTranif0:
      text = "slPassEnSwitch_RTranif0";
      break;
    case slPassEnSwitch_RTranif1:
      text = "slPassEnSwitch_RTranif1";
      break;
    case slPassEnSwitch_Tranif0:
      text = "slPassEnSwitch_Tranif0";
      break;
    case slPassEnSwitch_Tranif1:
      text = "slPassEnSwitch_Tranif1";
      break;
    case slPassSwitch_RTran:
      text = "slPassSwitch_RTran";
      break;
    case slPassSwitch_Tran:
      text = "slPassSwitch_Tran";
      break;
    case slPath_declaration:
      text = "slPath_declaration";
      break;
    case slPath_delay_expression:
      text = "slPath_delay_expression";
      break;
    case slPath_delay_value:
      text = "slPath_delay_value";
      break;
    case slPattern:
      text = "slPattern";
      break;
    case slPort:
      text = "slPort";
      break;
    case slPort_declaration:
      text = "slPort_declaration";
      break;
    case slPort_expression:
      text = "slPort_expression";
      break;
    case slPort_reference:
      text = "slPort_reference";
      break;
    case slPortDir_Inout:
      text = "slPortDir_Inout";
      break;
    case slPortDir_Inp:
      text = "slPortDir_Inp";
      break;
    case slPortDir_Out:
      text = "slPortDir_Out";
      break;
    case slPortDir_Ref:
      text = "slPortDir_Ref";
      break;
    case slPortInst:
      text = "slPortInst";
      break;
    case slPound_delay:
      text = "slPound_delay";
      break;
    case slPound_delay_value:
      text = "slPound_delay_value";
      break;
    case slPound_Pound_delay:
      text = "slPound_Pound_delay";
      break;
    case slPound_pound_delay:
      text = "slPound_pound_delay";
      break;
    case slPragma_directive:
      text = "slPragma_directive";
      break;
    case slPragma_expression:
      text = "slPragma_expression";
      break;
    case slPragma_value:
      text = "slPragma_value";
      break;
    case slPrimary:
      text = "slPrimary";
      break;
    case slPrimary_literal:
      text = "slPrimary_literal";
      break;
    case slPrimitive:
      text = "slPrimitive";
      break;
    case slPrimitiveInstance:
      text = "slPrimitiveInstance";
      break;
    case slPriority:
      text = "slPriority";
      break;
    case slProcedural_assertion_statement:
      text = "slProcedural_assertion_statement";
      break;
    case slProcedural_continuous_assignment:
      text = "slProcedural_continuous_assignment";
      break;
    case slProcedural_timing_control:
      text = "slProcedural_timing_control";
      break;
    case slProcedural_timing_control_statement:
      text = "slProcedural_timing_control_statement";
      break;
    case slProduction:
      text = "slProduction";
      break;
    case slProduction_item:
      text = "slProduction_item";
      break;
    case slProgram:
      text = "slProgram";
      break;
    case slProgram_ansi_header:
      text = "slProgram_ansi_header";
      break;
    case slProgram_declaration:
      text = "slProgram_declaration";
      break;
    case slProgram_generate_item:
      text = "slProgram_generate_item";
      break;
    case slProgram_instantiation:
      text = "slProgram_instantiation";
      break;
    case slProgram_item:
      text = "slProgram_item";
      break;
    case slProgram_nonansi_header:
      text = "slProgram_nonansi_header";
      break;
    case slProperty_actual_arg:
      text = "slProperty_actual_arg";
      break;
    case slProperty_case_item:
      text = "slProperty_case_item";
      break;
    case slProperty_declaration:
      text = "slProperty_declaration";
      break;
    case slProperty_expr:
      text = "slProperty_expr";
      break;
    case slProperty_formal_type:
      text = "slProperty_formal_type";
      break;
    case slProperty_instance:
      text = "slProperty_instance";
      break;
    case slProperty_lvar_port_direction:
      text = "slProperty_lvar_port_direction";
      break;
    case slProperty_port_item:
      text = "slProperty_port_item";
      break;
    case slProperty_port_list:
      text = "slProperty_port_list";
      break;
    case slProperty_spec:
      text = "slProperty_spec";
      break;
    case slPropQualifier_ClassItem:
      text = "slPropQualifier_ClassItem";
      break;
    case slPropQualifier_Rand:
      text = "slPropQualifier_Rand";
      break;
    case slPropQualifier_Randc:
      text = "slPropQualifier_Randc";
      break;
    case slProtect_directive:
      text = "slProtect_directive";
      break;
    case slProtected_directive:
      text = "slProtected_directive";
      break;
    case slPs_identifier:
      text = "slPs_identifier";
      break;
    case slPs_or_hierarchical_array_identifier:
      text = "slPs_or_hierarchical_array_identifier";
      break;
    case slPs_or_hierarchical_identifier:
      text = "slPs_or_hierarchical_identifier";
      break;
    case slPs_or_hierarchical_sequence_identifier:
      text = "slPs_or_hierarchical_sequence_identifier";
      break;
    case slPs_type_identifier:
      text = "slPs_type_identifier";
      break;
    case slPull0:
      text = "slPull0";
      break;
    case slPull1:
      text = "slPull1";
      break;
    case slPull_gate_instance:
      text = "slPull_gate_instance";
      break;
    case slPulldown:
      text = "slPulldown";
      break;
    case slPulldown_strength:
      text = "slPulldown_strength";
      break;
    case slPullup:
      text = "slPullup";
      break;
    case slPullup_strength:
      text = "slPullup_strength";
      break;
    case slPulse_control_specparam:
      text = "slPulse_control_specparam";
      break;
    case slPulsestyle_declaration:
      text = "slPulsestyle_declaration";
      break;
    case slPure:
      text = "slPure";
      break;
    case slPure_keyword:
      text = "slPure_keyword";
      break;
    case slPure_virtual_qualifier:
      text = "slPure_virtual_qualifier";
      break;
    case slQmark:
      text = "slQmark";
      break;
    case slQueue_dimension:
      text = "slQueue_dimension";
      break;
    case slRandcase_item:
      text = "slRandcase_item";
      break;
    case slRandcase_statement:
      text = "slRandcase_statement";
      break;
    case slRandomize_call:
      text = "slRandomize_call";
      break;
    case slRandomQualifier_Rand:
      text = "slRandomQualifier_Rand";
      break;
    case slRandomQualifier_RandC:
      text = "slRandomQualifier_RandC";
      break;
    case slRandsequence_statement:
      text = "slRandsequence_statement";
      break;
    case slRange_expression:
      text = "slRange_expression";
      break;
    case slRange_list:
      text = "slRange_list";
      break;
    case slRealConst:
      text = "slRealConst";
      break;
    case slRef_declaration:
      text = "slRef_declaration";
      break;
    case slReference_event:
      text = "slReference_event";
      break;
    case slREJECT_ON:
      text = "slREJECT_ON";
      break;
    case slRelease:
      text = "slRelease";
      break;
    case slRemain_active_flag:
      text = "slRemain_active_flag";
      break;
    case slRemove_gatename_directive:
      text = "slRemove_gatename_directive";
      break;
    case slRemove_netname_directive:
      text = "slRemove_netname_directive";
      break;
    case slRepeat:
      text = "slRepeat";
      break;
    case slRepeat_range:
      text = "slRepeat_range";
      break;
    case slResetall_directive:
      text = "slResetall_directive";
      break;
    case slRestrict_property_statement:
      text = "slRestrict_property_statement";
      break;
    case slReturnStmt:
      text = "slReturnStmt";
      break;
    case slRs_case:
      text = "slRs_case";
      break;
    case slRs_case_item:
      text = "slRs_case_item";
      break;
    case slRs_code_block:
      text = "slRs_code_block";
      break;
    case slRs_if_else:
      text = "slRs_if_else";
      break;
    case slRs_prod:
      text = "slRs_prod";
      break;
    case slRs_production_list:
      text = "slRs_production_list";
      break;
    case slRs_repeat:
      text = "slRs_repeat";
      break;
    case slRs_rule:
      text = "slRs_rule";
      break;
    case slS_ALWAYS:
      text = "slS_ALWAYS";
      break;
    case slS_EVENTUALLY:
      text = "slS_EVENTUALLY";
      break;
    case slS_NEXTTIME:
      text = "slS_NEXTTIME";
      break;
    case slS_UNTIL:
      text = "slS_UNTIL";
      break;
    case slScalar_1TickB0:
      text = "slScalar_1TickB0";
      break;
    case slScalar_1Tickb0:
      text = "slScalar_1Tickb0";
      break;
    case slScalar_1TickB1:
      text = "slScalar_1TickB1";
      break;
    case slScalar_1Tickb1:
      text = "slScalar_1Tickb1";
      break;
    case slScalar_Integral:
      text = "slScalar_Integral";
      break;
    case slScalar_TickB0:
      text = "slScalar_TickB0";
      break;
    case slScalar_Tickb0:
      text = "slScalar_Tickb0";
      break;
    case slScalar_TickB1:
      text = "slScalar_TickB1";
      break;
    case slScalar_Tickb1:
      text = "slScalar_Tickb1";
      break;
    case slScalar_timing_check_condition:
      text = "slScalar_timing_check_condition";
      break;
    case slSelect:
      text = "slSelect";
      break;
    case slSelect_condition:
      text = "slSelect_condition";
      break;
    case slSelect_expression:
      text = "slSelect_expression";
      break;
    case slSeq_block:
      text = "slSeq_block";
      break;
    case slSeq_input_list:
      text = "slSeq_input_list";
      break;
    case slSeqFormatType_Data:
      text = "slSeqFormatType_Data";
      break;
    case slSeqFormatType_Sequence:
      text = "slSeqFormatType_Sequence";
      break;
    case slSeqFormatType_Untyped:
      text = "slSeqFormatType_Untyped";
      break;
    case slSeqLvarPortDir_Inout:
      text = "slSeqLvarPortDir_Inout";
      break;
    case slSeqLvarPortDir_Input:
      text = "slSeqLvarPortDir_Input";
      break;
    case slSeqLvarPortDir_Output:
      text = "slSeqLvarPortDir_Output";
      break;
    case slSequence_actual_arg:
      text = "slSequence_actual_arg";
      break;
    case slSequence_declaration:
      text = "slSequence_declaration";
      break;
    case slSequence_expr:
      text = "slSequence_expr";
      break;
    case slSequence_instance:
      text = "slSequence_instance";
      break;
    case slSequence_list_of_arguments:
      text = "slSequence_list_of_arguments";
      break;
    case slSequence_match_item:
      text = "slSequence_match_item";
      break;
    case slSequence_method_call:
      text = "slSequence_method_call";
      break;
    case slSequence_port_item:
      text = "slSequence_port_item";
      break;
    case slSequence_port_list:
      text = "slSequence_port_list";
      break;
    case slSequential_body:
      text = "slSequential_body";
      break;
    case slSequential_entry:
      text = "slSequential_entry";
      break;
    case slShowcancelled_declaration:
      text = "slShowcancelled_declaration";
      break;
    case slSigned_directive:
      text = "slSigned_directive";
      break;
    case slSigning_Signed:
      text = "slSigning_Signed";
      break;
    case slSigning_Unsigned:
      text = "slSigning_Unsigned";
      break;
    case slSimple_args_macro_definition:
      text = "slSimple_args_macro_definition";
      break;
    case slSimple_args_macro_definition_in_macro_body:
      text = "slSimple_args_macro_definition_in_macro_body";
      break;
    case slSimple_immediate_assert_statement:
      text = "slSimple_immediate_assert_statement";
      break;
    case slSimple_immediate_assertion_statement:
      text = "slSimple_immediate_assertion_statement";
      break;
    case slSimple_immediate_assume_statement:
      text = "slSimple_immediate_assume_statement";
      break;
    case slSimple_immediate_cover_statement:
      text = "slSimple_immediate_cover_statement";
      break;
    case slSimple_macro_definition_body:
      text = "slSimple_macro_definition_body";
      break;
    case slSimple_macro_definition_body_in_macro_body:
      text = "slSimple_macro_definition_body_in_macro_body";
      break;
    case slSimple_no_args_macro_definition:
      text = "slSimple_no_args_macro_definition";
      break;
    case slSimple_no_args_macro_definition_in_macro_body:
      text = "slSimple_no_args_macro_definition_in_macro_body";
      break;
    case slSimple_path_declaration:
      text = "slSimple_path_declaration";
      break;
    case slSimple_type:
      text = "slSimple_type";
      break;
    case slSlice_size:
      text = "slSlice_size";
      break;
    case slSlline:
      text = "slSlline";
      break;
    case slSmall:
      text = "slSmall";
      break;
    case slSolve_before_list:
      text = "slSolve_before_list";
      break;
    case slSource_text:
      text = "slSource_text";
      break;
    case slSpaces:
      text = "slSpaces";
      break;
    case slSpecify_block:
      text = "slSpecify_block";
      break;
    case slSpecify_input_terminal_descriptor:
      text = "slSpecify_input_terminal_descriptor";
      break;
    case slSpecify_item:
      text = "slSpecify_item";
      break;
    case slSpecify_output_terminal_descriptor:
      text = "slSpecify_output_terminal_descriptor";
      break;
    case slSpecify_terminal_descriptor:
      text = "slSpecify_terminal_descriptor";
      break;
    case slSpecparam_assignment:
      text = "slSpecparam_assignment";
      break;
    case slSpecparam_declaration:
      text = "slSpecparam_declaration";
      break;
    case slStamptime_condition:
      text = "slStamptime_condition";
      break;
    case slStart_edge_offset:
      text = "slStart_edge_offset";
      break;
    case slState_dependent_path_declaration:
      text = "slState_dependent_path_declaration";
      break;
    case slStatement:
      text = "slStatement";
      break;
    case slStatement_item:
      text = "slStatement_item";
      break;
    case slStatement_or_null:
      text = "slStatement_or_null";
      break;
    case slStream_concatenation:
      text = "slStream_concatenation";
      break;
    case slStream_expression:
      text = "slStream_expression";
      break;
    case slStream_operator:
      text = "slStream_operator";
      break;
    case slStreaming_concatenation:
      text = "slStreaming_concatenation";
      break;
    case slStrength0:
      text = "slStrength0";
      break;
    case slStrength1:
      text = "slStrength1";
      break;
    case slString:
      text = "slString";
      break;
    case slString_blob:
      text = "slString_blob";
      break;
    case slString_type:
      text = "slString_type";
      break;
    case slString_value:
      text = "slString_value";
      break;
    case slStringConst:
      text = "slStringConst";
      break;
    case slStringLiteral:
      text = "slStringLiteral";
      break;
    case slSTRONG:
      text = "slSTRONG";
      break;
    case slStrong0:
      text = "slStrong0";
      break;
    case slStrong1:
      text = "slStrong1";
      break;
    case slStruct_keyword:
      text = "slStruct_keyword";
      break;
    case slStruct_union:
      text = "slStruct_union";
      break;
    case slStruct_union_member:
      text = "slStruct_union_member";
      break;
    case slStructure_pattern_key:
      text = "slStructure_pattern_key";
      break;
    case slSubroutine_call:
      text = "slSubroutine_call";
      break;
    case slSubroutine_call_statement:
      text = "slSubroutine_call_statement";
      break;
    case slSuper_dot_new:
      text = "slSuper_dot_new";
      break;
    case slSuper_keyword:
      text = "slSuper_keyword";
      break;
    case slSupply0:
      text = "slSupply0";
      break;
    case slSupply1:
      text = "slSupply1";
      break;
    case slSuppress_faults_directive:
      text = "slSuppress_faults_directive";
      break;
    case slSurelog_macro_not_defined:
      text = "slSurelog_macro_not_defined";
      break;
    case slSv_file_directive:
      text = "slSv_file_directive";
      break;
    case slSv_interface:
      text = "slSv_interface";
      break;
    case slSv_line_directive:
      text = "slSv_line_directive";
      break;
    case slSv_package:
      text = "slSv_package";
      break;
    case slSYNC_ACCEPT_ON:
      text = "slSYNC_ACCEPT_ON";
      break;
    case slSYNC_REJECT_ON:
      text = "slSYNC_REJECT_ON";
      break;
    case slSystem_task:
      text = "slSystem_task";
      break;
    case slSystem_task_names:
      text = "slSystem_task_names";
      break;
    case slSystem_timing_check:
      text = "slSystem_timing_check";
      break;
    case slT0x_path_delay_expression:
      text = "slT0x_path_delay_expression";
      break;
    case slT0z_path_delay_expression:
      text = "slT0z_path_delay_expression";
      break;
    case slT01_path_delay_expression:
      text = "slT01_path_delay_expression";
      break;
    case slT1x_path_delay_expression:
      text = "slT1x_path_delay_expression";
      break;
    case slT1z_path_delay_expression:
      text = "slT1z_path_delay_expression";
      break;
    case slT10_path_delay_expression:
      text = "slT10_path_delay_expression";
      break;
    case slT_path_delay_expression:
      text = "slT_path_delay_expression";
      break;
    case slTagged:
      text = "slTagged";
      break;
    case slTagged_keyword:
      text = "slTagged_keyword";
      break;
    case slTask_body_declaration:
      text = "slTask_body_declaration";
      break;
    case slTask_declaration:
      text = "slTask_declaration";
      break;
    case slTask_name_decl:
      text = "slTask_name_decl";
      break;
    case slTask_prototype:
      text = "slTask_prototype";
      break;
    case slText_blob:
      text = "slText_blob";
      break;
    case slTf_item_declaration:
      text = "slTf_item_declaration";
      break;
    case slTf_port_declaration:
      text = "slTf_port_declaration";
      break;
    case slTf_port_item:
      text = "slTf_port_item";
      break;
    case slTf_port_list:
      text = "slTf_port_list";
      break;
    case slTfall_path_delay_expression:
      text = "slTfall_path_delay_expression";
      break;
    case slTfPortDir_ConstRef:
      text = "slTfPortDir_ConstRef";
      break;
    case slTfPortDir_Inout:
      text = "slTfPortDir_Inout";
      break;
    case slTfPortDir_Inp:
      text = "slTfPortDir_Inp";
      break;
    case slTfPortDir_Out:
      text = "slTfPortDir_Out";
      break;
    case slTfPortDir_Ref:
      text = "slTfPortDir_Ref";
      break;
    case slThis:
      text = "slThis";
      break;
    case slThis_dot_super:
      text = "slThis_dot_super";
      break;
    case slThis_keyword:
      text = "slThis_keyword";
      break;
    case slThreshold:
      text = "slThreshold";
      break;
    case slTime_literal:
      text = "slTime_literal";
      break;
    case slTime_unit:
      text = "slTime_unit";
      break;
    case slTimescale_directive:
      text = "slTimescale_directive";
      break;
    case slTimeUnitsDecl_TimePrecision:
      text = "slTimeUnitsDecl_TimePrecision";
      break;
    case slTimeUnitsDecl_TimePrecisionTimeUnit:
      text = "slTimeUnitsDecl_TimePrecisionTimeUnit";
      break;
    case slTimeUnitsDecl_TimeUnit:
      text = "slTimeUnitsDecl_TimeUnit";
      break;
    case slTimeUnitsDecl_TimeUnitDiv:
      text = "slTimeUnitsDecl_TimeUnitDiv";
      break;
    case slTimeUnitsDecl_TimeUnitTimePrecision:
      text = "slTimeUnitsDecl_TimeUnitTimePrecision";
      break;
    case slTiming_check_condition:
      text = "slTiming_check_condition";
      break;
    case slTiming_check_event:
      text = "slTiming_check_event";
      break;
    case slTiming_check_limit:
      text = "slTiming_check_limit";
      break;
    case slTimingCheckEventControl_Edge:
      text = "slTimingCheckEventControl_Edge";
      break;
    case slTimingCheckEventControl_Negedge:
      text = "slTimingCheckEventControl_Negedge";
      break;
    case slTimingCheckEventControl_Posedge:
      text = "slTimingCheckEventControl_Posedge";
      break;
    case slTop_directives:
      text = "slTop_directives";
      break;
    case slTop_level_library_rule:
      text = "slTop_level_library_rule";
      break;
    case slTop_level_rule:
      text = "slTop_level_rule";
      break;
    case slTrans_list:
      text = "slTrans_list";
      break;
    case slTrans_range_list:
      text = "slTrans_range_list";
      break;
    case slTrans_set:
      text = "slTrans_set";
      break;
    case slTrise_path_delay_expression:
      text = "slTrise_path_delay_expression";
      break;
    case slTx0_path_delay_expression:
      text = "slTx0_path_delay_expression";
      break;
    case slTx1_path_delay_expression:
      text = "slTx1_path_delay_expression";
      break;
    case slTxz_path_delay_expression:
      text = "slTxz_path_delay_expression";
      break;
    case slType_declaration:
      text = "slType_declaration";
      break;
    case slType_reference:
      text = "slType_reference";
      break;
    case slTz0_path_delay_expression:
      text = "slTz0_path_delay_expression";
      break;
    case slTz1_path_delay_expression:
      text = "slTz1_path_delay_expression";
      break;
    case slTz_path_delay_expression:
      text = "slTz_path_delay_expression";
      break;
    case slTzx_path_delay_expression:
      text = "slTzx_path_delay_expression";
      break;
    case slUdp_ansi_declaration:
      text = "slUdp_ansi_declaration";
      break;
    case slUdp_body:
      text = "slUdp_body";
      break;
    case slUdp_declaration:
      text = "slUdp_declaration";
      break;
    case slUdp_declaration_port_list:
      text = "slUdp_declaration_port_list";
      break;
    case slUdp_initial_statement:
      text = "slUdp_initial_statement";
      break;
    case slUdp_input_declaration:
      text = "slUdp_input_declaration";
      break;
    case slUdp_instance:
      text = "slUdp_instance";
      break;
    case slUdp_instantiation:
      text = "slUdp_instantiation";
      break;
    case slUdp_nonansi_declaration:
      text = "slUdp_nonansi_declaration";
      break;
    case slUdp_output_declaration:
      text = "slUdp_output_declaration";
      break;
    case slUdp_port_declaration:
      text = "slUdp_port_declaration";
      break;
    case slUdp_port_list:
      text = "slUdp_port_list";
      break;
    case slUdp_reg_declaration:
      text = "slUdp_reg_declaration";
      break;
    case slUnary_BitwAnd:
      text = "slUnary_BitwAnd";
      break;
    case slUnary_BitwOr:
      text = "slUnary_BitwOr";
      break;
    case slUnary_BitwXor:
      text = "slUnary_BitwXor";
      break;
    case slUnary_Minus:
      text = "slUnary_Minus";
      break;
    case slUnary_Not:
      text = "slUnary_Not";
      break;
    case slUnary_Plus:
      text = "slUnary_Plus";
      break;
    case slUnary_ReductNand:
      text = "slUnary_ReductNand";
      break;
    case slUnary_ReductNor:
      text = "slUnary_ReductNor";
      break;
    case slUnary_ReductXnor1:
      text = "slUnary_ReductXnor1";
      break;
    case slUnary_ReductXnor2:
      text = "slUnary_ReductXnor2";
      break;
    case slUnary_Tilda:
      text = "slUnary_Tilda";
      break;
    case slUnaryModOp_BitwAnd:
      text = "slUnaryModOp_BitwAnd";
      break;
    case slUnaryModOp_BitwOr:
      text = "slUnaryModOp_BitwOr";
      break;
    case slUnaryModOp_BitwXor:
      text = "slUnaryModOp_BitwXor";
      break;
    case slUnaryModOp_Not:
      text = "slUnaryModOp_Not";
      break;
    case slUnaryModOp_ReductNand:
      text = "slUnaryModOp_ReductNand";
      break;
    case slUnaryModOp_ReductNor:
      text = "slUnaryModOp_ReductNor";
      break;
    case slUnaryModOp_ReductXNor1:
      text = "slUnaryModOp_ReductXNor1";
      break;
    case slUnaryModOp_ReductXnor2:
      text = "slUnaryModOp_ReductXnor2";
      break;
    case slUnaryModOp_Tilda:
      text = "slUnaryModOp_Tilda";
      break;
    case slUnbased_unsized_literal:
      text = "slUnbased_unsized_literal";
      break;
    case slUnconnected_drive_directive:
      text = "slUnconnected_drive_directive";
      break;
    case slUndef_directive:
      text = "slUndef_directive";
      break;
    case slUndefineall_directive:
      text = "slUndefineall_directive";
      break;
    case slUnion_keyword:
      text = "slUnion_keyword";
      break;
    case slUnique:
      text = "slUnique";
      break;
    case slUnique0:
      text = "slUnique0";
      break;
    case slUnique_call:
      text = "slUnique_call";
      break;
    case slUnique_priority:
      text = "slUnique_priority";
      break;
    case slUniqueness_constraint:
      text = "slUniqueness_constraint";
      break;
    case slUnpacked_dimension:
      text = "slUnpacked_dimension";
      break;
    case slUnsigned_directive:
      text = "slUnsigned_directive";
      break;
    case slUnsized_dimension:
      text = "slUnsized_dimension";
      break;
    case slUnterminated_string:
      text = "slUnterminated_string";
      break;
    case slUNTIL:
      text = "slUNTIL";
      break;
    case slUse_clause:
      text = "slUse_clause";
      break;
    case slUse_clause_config:
      text = "slUse_clause_config";
      break;
    case slUselib_directive:
      text = "slUselib_directive";
      break;
    case slValue_range:
      text = "slValue_range";
      break;
    case slVar_data_type:
      text = "slVar_data_type";
      break;
    case slVar_type:
      text = "slVar_type";
      break;
    case slVariable_assignment:
      text = "slVariable_assignment";
      break;
    case slVariable_decl_assignment:
      text = "slVariable_decl_assignment";
      break;
    case slVariable_declaration:
      text = "slVariable_declaration";
      break;
    case slVariable_dimension:
      text = "slVariable_dimension";
      break;
    case slVariable_lvalue:
      text = "slVariable_lvalue";
      break;
    case slVariable_port_header:
      text = "slVariable_port_header";
      break;
    case slVariable_port_type:
      text = "slVariable_port_type";
      break;
    case slVirtual:
      text = "slVirtual";
      break;
    case slVirtual_interface_declaration:
      text = "slVirtual_interface_declaration";
      break;
    case slWait_statement:
      text = "slWait_statement";
      break;
    case slWEAK:
      text = "slWEAK";
      break;
    case slWeak0:
      text = "slWeak0";
      break;
    case slWeak1:
      text = "slWeak1";
      break;
    case slWhile:
      text = "slWhile";
      break;
    case slWith:
      text = "slWith";
      break;
    case slX:
      text = "slX";
      break;
    case slXor_call:
      text = "slXor_call";
      break;
    case slZ:
      text = "slZ";
      break;
    };
    return text;
}

